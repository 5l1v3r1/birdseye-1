[{"traceback": null, "return_value": "None", "function": {"html_body": "<span data-index=\"13\" data-type=\"stmt\">@<span data-index=\"55\" data-type=\"expr\">eye</span>\ndef main():\n    <span data-index=\"44\" data-type=\"stmt\"><span data-index=\"97\" data-type=\"expr\"><span data-index=\"152\" data-type=\"expr\">factorial</span>(5)</span></span>\n\n    <span data-index=\"45\" data-type=\"stmt\">vals = []</span>\n<span data-index=\"46\" data-type=\"loop\">    for i in <span data-index=\"101\" data-type=\"expr\"><span data-index=\"157\" data-type=\"expr\">range</span>(100)</span>:\n        <span data-index=\"102\" data-type=\"stmt\"><span data-index=\"159\" data-type=\"expr\"><span data-index=\"211\" data-type=\"expr\"><span data-index=\"253\" data-type=\"expr\">vals</span>.append</span>([])</span></span>\n<span data-index=\"103\" data-type=\"loop\">        for j in <span data-index=\"161\" data-type=\"expr\"><span data-index=\"214\" data-type=\"expr\">range</span>(<span data-index=\"215\" data-type=\"expr\">2 * <span data-index=\"259\" data-type=\"expr\">i</span></span>)</span>:\n            <span data-index=\"162\" data-type=\"stmt\"><span data-index=\"216\" data-type=\"expr\"><span data-index=\"260\" data-type=\"expr\"><span data-index=\"281\" data-type=\"expr\"><span data-index=\"299\" data-type=\"expr\">vals</span>[-1]</span>.append</span>(<span data-index=\"261\" data-type=\"expr\"><span data-index=\"283\" data-type=\"expr\">i</span> + <span data-index=\"285\" data-type=\"expr\">j</span></span>)</span></span>\n            <span data-index=\"163\" data-type=\"stmt\"><span data-index=\"217\" data-type=\"expr\"><span data-index=\"262\" data-type=\"expr\">dummy</span>(<span data-index=\"263\" data-type=\"expr\">vals</span>)</span></span></span></span>\n\n<span data-index=\"47\" data-type=\"loop\">    for i in <span data-index=\"105\" data-type=\"expr\"><span data-index=\"165\" data-type=\"expr\">range</span>(6)</span>:\n<span data-index=\"106\" data-type=\"stmt\">        try:\n            <span data-index=\"167\" data-type=\"stmt\"><span data-index=\"219\" data-type=\"expr\"><span data-index=\"264\" data-type=\"expr\">dummy</span>(<span data-index=\"265\" data-type=\"expr\"><span data-index=\"289\" data-type=\"expr\">1 / (<span data-index=\"306\" data-type=\"expr\"><span data-index=\"310\" data-type=\"expr\">i</span> % 2</span>)</span> + 10</span>)</span></span>\n        except <span data-index=\"220\" data-type=\"expr\">ZeroDivisionError</span>:\n            <span data-index=\"221\" data-type=\"stmt\">pass</span></span></span>\n\n    <span data-index=\"48\" data-type=\"stmt\">c = <span data-index=\"108\" data-type=\"expr\"><span data-index=\"170\" data-type=\"expr\">MyClass</span>()</span></span>\n    <span data-index=\"49\" data-type=\"stmt\"><span data-index=\"171\" data-type=\"expr\">c</span>.list = <span data-index=\"110\" data-type=\"expr\">[<span data-index=\"173\" data-type=\"expr\">[<span data-index=\"224\" data-type=\"expr\"><span data-index=\"267\" data-type=\"expr\">x</span> + <span data-index=\"269\" data-type=\"expr\">y</span></span> <span data-index=\"225\" data-type=\"loop\">for x in <span data-index=\"271\" data-type=\"expr\"><span data-index=\"295\" data-type=\"expr\">range</span>(100)</span></span>]</span> \n <span data-index=\"174\" data-type=\"loop\">for y in <span data-index=\"227\" data-type=\"expr\"><span data-index=\"273\" data-type=\"expr\">range</span>(100)</span></span>]</span></span>\n    <span data-index=\"50\" data-type=\"stmt\"><span data-index=\"111\" data-type=\"expr\"><span data-index=\"175\" data-type=\"expr\">dummy</span>(<span data-index=\"176\" data-type=\"expr\">c</span>)</span></span>\n\n    <span data-index=\"51\" data-type=\"stmt\"><span data-index=\"112\" data-type=\"expr\"><span data-index=\"177\" data-type=\"expr\">complex_args</span>(<span data-index=\"178\" data-type=\"expr\"><span data-index=\"231\" data-type=\"expr\">list</span>(<span data-index=\"232\" data-type=\"expr\"><span data-index=\"276\" data-type=\"expr\">range</span>(1000)</span>)</span>,\n                 &quot;hello&quot;,\n                 key2=8,\n                 kwarg1={})</span></span>\n\n    <span data-index=\"52\" data-type=\"stmt\">g = <span data-index=\"114\" data-type=\"expr\"><span data-index=\"183\" data-type=\"expr\">gen</span>()</span></span>\n    <span data-index=\"53\" data-type=\"stmt\"><span data-index=\"115\" data-type=\"expr\"><span data-index=\"184\" data-type=\"expr\">use_gen_1</span>(<span data-index=\"185\" data-type=\"expr\">g</span>)</span></span>\n    <span data-index=\"54\" data-type=\"stmt\"><span data-index=\"116\" data-type=\"expr\"><span data-index=\"186\" data-type=\"expr\">use_gen_2</span>(<span data-index=\"187\" data-type=\"expr\">g</span>)</span></span></span>", "data": {"node_loops": {"310": [47], "271": [174], "162": [46, 103], "159": [46], "267": [174, 225], "167": [47], "281": [46, 103], "262": [46, 103], "261": [46, 103], "225": [174], "215": [46], "163": [46, 103], "224": [174, 225], "102": [46], "265": [47], "220": [47], "214": [46], "161": [46], "289": [47], "217": [46, 103], "260": [46, 103], "269": [174, 225], "263": [46, 103], "295": [174], "106": [47], "103": [46], "173": [174], "259": [46], "283": [46, 103], "306": [47], "299": [46, 103], "211": [46], "285": [46, 103], "264": [47], "219": [47], "221": [47], "253": [46], "216": [46, 103]}}, "name": "main", "lineno": 59}, "arguments": [], "data": {"num_special_types": 11, "type_names": ["MyClass", "NoneType", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "node_values": {"310": {"1": ["1", "int"], "0": ["0", "int"], "5": ["5", "int"], "4": ["4", "int"], "3": ["3", "int"], "2": ["2", "int"]}, "271": {"1": ["range(0, 100)", "range", "len() = 100"], "0": ["range(0, 100)", "range", "len() = 100"], "5": ["range(0, 100)", "range", "len() = 100"], "4": ["range(0, 100)", "range", "len() = 100"], "3": ["range(0, 100)", "range", "len() = 100"], "2": ["range(0, 100)", "range", "len() = 100"]}, "162": {"1": {"1": true, "0": true}, "2": {"1": true, "0": true, "2": true, "3": true}, "5": {"1": true, "0": true, "5": true, "4": true, "3": true, "2": true}, "4": {"1": true, "0": true, "5": true, "4": true, "3": true, "2": true}, "3": {"1": true, "0": true, "5": true, "4": true, "3": true, "2": true}}, "217": {"1": {"1": ["None", "NoneType"], "0": ["None", "NoneType"]}, "2": {"1": ["None", "NoneType"], "0": ["None", "NoneType"], "2": ["None", "NoneType"], "3": ["None", "NoneType"]}, "5": {"1": ["None", "NoneType"], "0": ["None", "NoneType"], "5": ["None", "NoneType"], "4": ["None", "NoneType"], "3": ["None", "NoneType"], "2": ["None", "NoneType"]}, "4": {"1": ["None", "NoneType"], "0": ["None", "NoneType"], "5": ["None", "NoneType"], "4": ["None", "NoneType"], "3": ["None", "NoneType"], "2": ["None", "NoneType"]}, "3": {"1": ["None", "NoneType"], "0": ["None", "NoneType"], "5": ["None", "NoneType"], "4": ["None", "NoneType"], "3": ["None", "NoneType"], "2": ["None", "NoneType"]}}, "215": {"1": ["2", "int"], "0": ["0", "int"], "5": ["198", "int"], "4": ["196", "int"], "3": ["194", "int"], "2": ["4", "int"]}, "267": {"1": {"1": ["1", "int"], "0": ["0", "int"], "5": ["99", "int"], "4": ["98", "int"], "3": ["97", "int"], "2": ["2", "int"]}, "0": {"1": ["1", "int"], "0": ["0", "int"], "5": ["99", "int"], "4": ["98", "int"], "3": ["97", "int"], "2": ["2", "int"]}, "5": {"1": ["1", "int"], "0": ["0", "int"], "5": ["99", "int"], "4": ["98", "int"], "3": ["97", "int"], "2": ["2", "int"]}, "4": {"1": ["1", "int"], "0": ["0", "int"], "5": ["99", "int"], "4": ["98", "int"], "3": ["97", "int"], "2": ["2", "int"]}, "3": {"1": ["1", "int"], "0": ["0", "int"], "5": ["99", "int"], "4": ["98", "int"], "3": ["97", "int"], "2": ["2", "int"]}, "2": {"1": ["1", "int"], "0": ["0", "int"], "5": ["99", "int"], "4": ["98", "int"], "3": ["97", "int"], "2": ["2", "int"]}}, "167": {"1": true, "0": true, "5": true, "4": true, "3": true, "2": true}, "110": ["[[0, 1, 2, 3, 4, 5, ...], [1, 2, 3, 4, 5, 6, ...], [2, 3, 4, 5, 6, 7, ...], [3, 4, 5, 6, 7, 8, ...], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]]], ["1", ["[1, 2, 3, 4, 5, 6, ...]", "list", "len() = 100", ["0", ["1", "int"]], ["1", ["2", "int"]], ["2", ["3", "int"]], ["97", ["98", "int"]], ["98", ["99", "int"]], ["99", ["100", "int"]]]], ["2", ["[2, 3, 4, 5, 6, 7, ...]", "list", "len() = 100", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["97", ["99", "int"]], ["98", ["100", "int"]], ["99", ["101", "int"]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 100", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["97", ["194", "int"]], ["98", ["195", "int"]], ["99", ["196", "int"]]]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 100", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["97", ["195", "int"]], ["98", ["196", "int"]], ["99", ["197", "int"]]]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 100", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["97", ["196", "int"]], ["98", ["197", "int"]], ["99", ["198", "int"]]]]], "211": {"1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "5": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "4": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"]}, "224": {"1": {"1": ["2", "int"], "0": ["1", "int"], "5": ["100", "int"], "4": ["99", "int"], "3": ["98", "int"], "2": ["3", "int"]}, "0": {"1": ["1", "int"], "0": ["0", "int"], "5": ["99", "int"], "4": ["98", "int"], "3": ["97", "int"], "2": ["2", "int"]}, "5": {"1": ["100", "int"], "0": ["99", "int"], "5": ["198", "int"], "4": ["197", "int"], "3": ["196", "int"], "2": ["101", "int"]}, "4": {"1": ["99", "int"], "0": ["98", "int"], "5": ["197", "int"], "4": ["196", "int"], "3": ["195", "int"], "2": ["100", "int"]}, "3": {"1": ["98", "int"], "0": ["97", "int"], "5": ["196", "int"], "4": ["195", "int"], "3": ["194", "int"], "2": ["99", "int"]}, "2": {"1": ["3", "int"], "0": ["2", "int"], "5": ["101", "int"], "4": ["100", "int"], "3": ["99", "int"], "2": ["4", "int"]}}, "49": true, "265": {"1": ["11.0", "float"], "3": ["11.0", "float"], "5": ["11.0", "float"]}, "306": {"1": ["1", "int"], "0": ["0", "int"], "5": ["1", "int"], "4": ["0", "int"], "3": ["1", "int"], "2": ["0", "int"]}, "289": {"1": ["1.0", "float"], "0": ["ZeroDivisionError: division by zero\n", -1], "5": ["1.0", "float"], "4": ["ZeroDivisionError: division by zero\n", -1], "3": ["1.0", "float"], "2": ["ZeroDivisionError: division by zero\n", -1]}, "112": ["None", "NoneType", {"inner_call": "test_id_7"}], "97": ["120", "int", {"inner_call": "test_id_2"}], "260": {"1": {"1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"]}, "2": {"1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"]}, "5": {"1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "5": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "4": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"]}, "4": {"1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "5": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "4": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"]}, "3": {"1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "5": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "4": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"]}}, "269": {"1": {"1": ["1", "int"], "0": ["1", "int"], "5": ["1", "int"], "4": ["1", "int"], "3": ["1", "int"], "2": ["1", "int"]}, "0": {"1": ["0", "int"], "0": ["0", "int"], "5": ["0", "int"], "4": ["0", "int"], "3": ["0", "int"], "2": ["0", "int"]}, "5": {"1": ["99", "int"], "0": ["99", "int"], "5": ["99", "int"], "4": ["99", "int"], "3": ["99", "int"], "2": ["99", "int"]}, "4": {"1": ["98", "int"], "0": ["98", "int"], "5": ["98", "int"], "4": ["98", "int"], "3": ["98", "int"], "2": ["98", "int"]}, "3": {"1": ["97", "int"], "0": ["97", "int"], "5": ["97", "int"], "4": ["97", "int"], "3": ["97", "int"], "2": ["97", "int"]}, "2": {"1": ["2", "int"], "0": ["2", "int"], "5": ["2", "int"], "4": ["2", "int"], "3": ["2", "int"], "2": ["2", "int"]}}, "232": ["range(0, 1000)", "range", "len() = 1000"], "186": ["<function use_gen_2 at 0xABC>", "function", ["__wrapped__", ["<function use_gen_2 at 0xABC>", "function"]]], "263": {"1": {"1": ["[[], [1, 2]]", "list", "len() = 2", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]]], "0": ["[[], [1]]", "list", "len() = 2", ["0", ["[]", "list"]], ["1", ["[1]", "list"]]]}, "2": {"1": ["[[], [1, 2], [2, 3]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3]", "list"]]], "0": ["[[], [1, 2], [2]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2]", "list"]]], "2": ["[[], [1, 2], [2, 3, 4]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]]]}, "5": {"1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100]", "list"]]], "0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99]", "list"]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list"]]], "2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101]", "list"]]]}, "4": {"1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99]", "list"]]], "0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98]", "list"]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]]], "2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100]", "list"]]]}, "3": {"1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98]", "list"]]], "0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97]", "list"]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]]], "2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99]", "list"]]]}}, "48": true, "116": ["None", "NoneType", {"inner_call": "test_id_10"}], "103": {"1": true, "0": true, "5": true, "4": true, "3": true, "2": true}, "174": true, "46": true, "173": {"1": ["[1, 2, 3, 4, 5, 6, ...]", "list", "len() = 100", ["0", ["1", "int"]], ["1", ["2", "int"]], ["2", ["3", "int"]], ["97", ["98", "int"]], ["98", ["99", "int"]], ["99", ["100", "int"]]], "0": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]], "5": ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 100", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["97", ["196", "int"]], ["98", ["197", "int"]], ["99", ["198", "int"]]], "4": ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 100", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["97", ["195", "int"]], ["98", ["196", "int"]], ["99", ["197", "int"]]], "3": ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 100", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["97", ["194", "int"]], ["98", ["195", "int"]], ["99", ["196", "int"]]], "2": ["[2, 3, 4, 5, 6, 7, ...]", "list", "len() = 100", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["97", ["99", "int"]], ["98", ["100", "int"]], ["99", ["101", "int"]]]}, "115": ["None", "NoneType", {"inner_call": "test_id_8"}], "178": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 1000", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["997", ["997", "int"]], ["998", ["998", "int"]], ["999", ["999", "int"]]], "51": true, "299": {"1": {"1": ["[[], [1]]", "list", "len() = 2", ["0", ["[]", "list"]], ["1", ["[1]", "list"]]], "0": ["[[], []]", "list", "len() = 2", ["0", ["[]", "list"]], ["1", ["[]", "list"]]]}, "2": {"1": ["[[], [1, 2], [2]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2]", "list"]]], "0": ["[[], [1, 2], []]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[]", "list"]]], "2": ["[[], [1, 2], [2, 3]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4]", "list"]]]}, "5": {"1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99]", "list"]]], "0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[]", "list"]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list"]]], "2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100]", "list"]]]}, "4": {"1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98]", "list"]]], "0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[]", "list"]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]]], "2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99]", "list"]]]}, "3": {"1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97]", "list"]]], "0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[]", "list"]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]]], "2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98]", "list"]]]}}, "283": {"1": {"1": ["1", "int"], "0": ["1", "int"]}, "2": {"1": ["2", "int"], "0": ["2", "int"], "2": ["2", "int"], "3": ["2", "int"]}, "5": {"1": ["99", "int"], "0": ["99", "int"], "5": ["99", "int"], "4": ["99", "int"], "3": ["99", "int"], "2": ["99", "int"]}, "4": {"1": ["98", "int"], "0": ["98", "int"], "5": ["98", "int"], "4": ["98", "int"], "3": ["98", "int"], "2": ["98", "int"]}, "3": {"1": ["97", "int"], "0": ["97", "int"], "5": ["97", "int"], "4": ["97", "int"], "3": ["97", "int"], "2": ["97", "int"]}}, "176": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass", ["list", ["[[0, 1, 2, 3, 4, 5, ...], [1, 2, 3, 4, 5, 6, ...], [2, 3, 4, 5, 6, 7, ...], [3, 4, 5, 6, 7, 8, ...], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]]], ["1", ["[1, 2, 3, 4, 5, 6, ...]", "list", "len() = 100", ["0", ["1", "int"]], ["1", ["2", "int"]], ["2", ["3", "int"]], ["97", ["98", "int"]], ["98", ["99", "int"]], ["99", ["100", "int"]]]], ["2", ["[2, 3, 4, 5, 6, 7, ...]", "list", "len() = 100", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["97", ["99", "int"]], ["98", ["100", "int"]], ["99", ["101", "int"]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 100", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["97", ["194", "int"]], ["98", ["195", "int"]], ["99", ["196", "int"]]]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 100", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["97", ["195", "int"]], ["98", ["196", "int"]], ["99", ["197", "int"]]]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 100", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["97", ["196", "int"]], ["98", ["197", "int"]], ["99", ["198", "int"]]]]]]], "44": true, "216": {"1": {"1": ["None", "NoneType"], "0": ["None", "NoneType"]}, "2": {"1": ["None", "NoneType"], "0": ["None", "NoneType"], "2": ["None", "NoneType"], "3": ["None", "NoneType"]}, "5": {"1": ["None", "NoneType"], "0": ["None", "NoneType"], "5": ["None", "NoneType"], "4": ["None", "NoneType"], "3": ["None", "NoneType"], "2": ["None", "NoneType"]}, "4": {"1": ["None", "NoneType"], "0": ["None", "NoneType"], "5": ["None", "NoneType"], "4": ["None", "NoneType"], "3": ["None", "NoneType"], "2": ["None", "NoneType"]}, "3": {"1": ["None", "NoneType"], "0": ["None", "NoneType"], "5": ["None", "NoneType"], "4": ["None", "NoneType"], "3": ["None", "NoneType"], "2": ["None", "NoneType"]}}, "175": ["<function dummy at 0xABC>", "function"], "50": true, "187": ["<generator object gen at 0xABC>", "generator"], "114": ["<generator object gen at 0xABC>", "generator"], "159": {"1": ["None", "NoneType"], "0": ["None", "NoneType"], "5": ["None", "NoneType"], "4": ["None", "NoneType"], "3": ["None", "NoneType"], "2": ["None", "NoneType"]}, "111": ["None", "NoneType"], "54": true, "47": true, "281": {"1": {"1": ["[1]", "list", "len() = 1", ["0", ["1", "int"]]], "0": ["[]", "list", "len() = 0"]}, "2": {"1": ["[2]", "list", "len() = 1", ["0", ["2", "int"]]], "0": ["[]", "list", "len() = 0"], "2": ["[2, 3]", "list", "len() = 2", ["0", ["2", "int"]], ["1", ["3", "int"]]], "3": ["[2, 3, 4]", "list", "len() = 3", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]]]}, "5": {"1": ["[99]", "list", "len() = 1", ["0", ["99", "int"]]], "0": ["[]", "list", "len() = 0"], "5": ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 197", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["194", ["293", "int"]], ["195", ["294", "int"]], ["196", ["295", "int"]]], "4": ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 196", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["193", ["292", "int"]], ["194", ["293", "int"]], ["195", ["294", "int"]]], "3": ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 195", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["192", ["291", "int"]], ["193", ["292", "int"]], ["194", ["293", "int"]]], "2": ["[99, 100]", "list", "len() = 2", ["0", ["99", "int"]], ["1", ["100", "int"]]]}, "4": {"1": ["[98]", "list", "len() = 1", ["0", ["98", "int"]]], "0": ["[]", "list", "len() = 0"], "5": ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 195", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["192", ["290", "int"]], ["193", ["291", "int"]], ["194", ["292", "int"]]], "4": ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 194", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["191", ["289", "int"]], ["192", ["290", "int"]], ["193", ["291", "int"]]], "3": ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 193", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["190", ["288", "int"]], ["191", ["289", "int"]], ["192", ["290", "int"]]], "2": ["[98, 99]", "list", "len() = 2", ["0", ["98", "int"]], ["1", ["99", "int"]]]}, "3": {"1": ["[97]", "list", "len() = 1", ["0", ["97", "int"]]], "0": ["[]", "list", "len() = 0"], "5": ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 193", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["190", ["287", "int"]], ["191", ["288", "int"]], ["192", ["289", "int"]]], "4": ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 192", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["189", ["286", "int"]], ["190", ["287", "int"]], ["191", ["288", "int"]]], "3": ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 191", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["188", ["285", "int"]], ["189", ["286", "int"]], ["190", ["287", "int"]]], "2": ["[97, 98]", "list", "len() = 2", ["0", ["97", "int"]], ["1", ["98", "int"]]]}}, "262": {"1": {"1": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"]}, "2": {"1": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "2": ["<function dummy at 0xABC>", "function"], "3": ["<function dummy at 0xABC>", "function"]}, "5": {"1": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "5": ["<function dummy at 0xABC>", "function"], "4": ["<function dummy at 0xABC>", "function"], "3": ["<function dummy at 0xABC>", "function"], "2": ["<function dummy at 0xABC>", "function"]}, "4": {"1": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "5": ["<function dummy at 0xABC>", "function"], "4": ["<function dummy at 0xABC>", "function"], "3": ["<function dummy at 0xABC>", "function"], "2": ["<function dummy at 0xABC>", "function"]}, "3": {"1": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "5": ["<function dummy at 0xABC>", "function"], "4": ["<function dummy at 0xABC>", "function"], "3": ["<function dummy at 0xABC>", "function"], "2": ["<function dummy at 0xABC>", "function"]}}, "152": ["<function factorial at 0xABC>", "function", ["__wrapped__", ["<function factorial at 0xABC>", "function"]]], "225": {"1": true, "0": true, "5": true, "4": true, "3": true, "2": true}, "285": {"1": {"1": ["1", "int"], "0": ["0", "int"]}, "2": {"1": ["1", "int"], "0": ["0", "int"], "2": ["2", "int"], "3": ["3", "int"]}, "5": {"1": ["1", "int"], "0": ["0", "int"], "5": ["197", "int"], "4": ["196", "int"], "3": ["195", "int"], "2": ["2", "int"]}, "4": {"1": ["1", "int"], "0": ["0", "int"], "5": ["195", "int"], "4": ["194", "int"], "3": ["193", "int"], "2": ["2", "int"]}, "3": {"1": ["1", "int"], "0": ["0", "int"], "5": ["193", "int"], "4": ["192", "int"], "3": ["191", "int"], "2": ["2", "int"]}}, "161": {"1": ["range(0, 2)", "range", "len() = 2"], "0": ["range(0, 0)", "range", "len() = 0"], "5": ["range(0, 198)", "range", "len() = 198"], "4": ["range(0, 196)", "range", "len() = 196"], "3": ["range(0, 194)", "range", "len() = 194"], "2": ["range(0, 4)", "range", "len() = 4"]}, "53": true, "105": ["range(0, 6)", "range", "len() = 6"], "52": true, "184": ["<function use_gen_1 at 0xABC>", "function", ["__wrapped__", ["<function use_gen_1 at 0xABC>", "function"]]], "221": {"2": true, "0": true, "4": true}, "163": {"1": {"1": true, "0": true}, "2": {"1": true, "0": true, "2": true, "3": true}, "5": {"1": true, "0": true, "5": true, "4": true, "3": true, "2": true}, "4": {"1": true, "0": true, "5": true, "4": true, "3": true, "2": true}, "3": {"1": true, "0": true, "5": true, "4": true, "3": true, "2": true}}, "170": ["<class 'tests.golden_script.MyClass'>", "type", ["__dict__", ["<attribute '__dict__' of 'MyClass' objects>", "getset_descriptor"]], ["__doc__", ["None", "NoneType"]], ["__module__", ["'tests.golden_script'", "str", "len() = 19"]], ["__weakref__", ["<attribute '__weakref__' of 'MyClass' objects>", "getset_descriptor"]]], "101": ["range(0, 100)", "range", "len() = 100"], "177": ["<function complex_args at 0xABC>", "function", ["__wrapped__", ["<function complex_args at 0xABC>", "function"]]], "106": {"1": true, "0": true, "5": true, "4": true, "3": true, "2": true}, "261": {"1": {"1": ["2", "int"], "0": ["1", "int"]}, "2": {"1": ["3", "int"], "0": ["2", "int"], "2": ["4", "int"], "3": ["5", "int"]}, "5": {"1": ["100", "int"], "0": ["99", "int"], "5": ["296", "int"], "4": ["295", "int"], "3": ["294", "int"], "2": ["101", "int"]}, "4": {"1": ["99", "int"], "0": ["98", "int"], "5": ["293", "int"], "4": ["292", "int"], "3": ["291", "int"], "2": ["100", "int"]}, "3": {"1": ["98", "int"], "0": ["97", "int"], "5": ["290", "int"], "4": ["289", "int"], "3": ["288", "int"], "2": ["99", "int"]}}, "185": ["<generator object gen at 0xABC>", "generator"], "259": {"1": ["1", "int"], "0": ["0", "int"], "5": ["99", "int"], "4": ["98", "int"], "3": ["97", "int"], "2": ["2", "int"]}, "108": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass"], "183": ["<function gen at 0xABC>", "function", ["__wrapped__", ["<function gen at 0xABC>", "function"]]], "102": {"1": true, "0": true, "5": true, "4": true, "3": true, "2": true}, "227": ["range(0, 100)", "range", "len() = 100"], "264": {"1": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "5": ["<function dummy at 0xABC>", "function"], "4": ["<function dummy at 0xABC>", "function"], "3": ["<function dummy at 0xABC>", "function"], "2": ["<function dummy at 0xABC>", "function"]}, "219": {"1": ["None", "NoneType"], "3": ["None", "NoneType"], "5": ["None", "NoneType"]}, "171": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass"], "253": {"1": ["[[]]", "list", "len() = 1", ["0", ["[]", "list", "len() = 0"]]], "0": ["[]", "list", "len() = 0"], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list", "len() = 0"]], ["1", ["[1, 2]", "list", "len() = 2", ["0", ["1", "int"]], ["1", ["2", "int"]]]], ["2", ["[2, 3, 4, 5]", "list", "len() = 4", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["3", ["5", "int"]]]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", "len() = 192", ["0", ["96", "int"]], ["1", ["97", "int"]], ["2", ["98", "int"]], ["189", ["285", "int"]], ["190", ["286", "int"]], ["191", ["287", "int"]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 194", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["191", ["288", "int"]], ["192", ["289", "int"]], ["193", ["290", "int"]]]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 196", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["193", ["291", "int"]], ["194", ["292", "int"]], ["195", ["293", "int"]]]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list", "len() = 0"]], ["1", ["[1, 2]", "list", "len() = 2", ["0", ["1", "int"]], ["1", ["2", "int"]]]], ["2", ["[2, 3, 4, 5]", "list", "len() = 4", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["3", ["5", "int"]]]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", "len() = 190", ["0", ["95", "int"]], ["1", ["96", "int"]], ["2", ["97", "int"]], ["187", ["282", "int"]], ["188", ["283", "int"]], ["189", ["284", "int"]]]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", "len() = 192", ["0", ["96", "int"]], ["1", ["97", "int"]], ["2", ["98", "int"]], ["189", ["285", "int"]], ["190", ["286", "int"]], ["191", ["287", "int"]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 194", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["191", ["288", "int"]], ["192", ["289", "int"]], ["193", ["290", "int"]]]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 97", ["0", ["[]", "list", "len() = 0"]], ["1", ["[1, 2]", "list", "len() = 2", ["0", ["1", "int"]], ["1", ["2", "int"]]]], ["2", ["[2, 3, 4, 5]", "list", "len() = 4", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["3", ["5", "int"]]]], ["94", ["[94, 95, 96, 97, 98, 99, ...]", "list", "len() = 188", ["0", ["94", "int"]], ["1", ["95", "int"]], ["2", ["96", "int"]], ["185", ["279", "int"]], ["186", ["280", "int"]], ["187", ["281", "int"]]]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", "len() = 190", ["0", ["95", "int"]], ["1", ["96", "int"]], ["2", ["97", "int"]], ["187", ["282", "int"]], ["188", ["283", "int"]], ["189", ["284", "int"]]]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", "len() = 192", ["0", ["96", "int"]], ["1", ["97", "int"]], ["2", ["98", "int"]], ["189", ["285", "int"]], ["190", ["286", "int"]], ["191", ["287", "int"]]]]], "2": ["[[], [1, 2]]", "list", "len() = 2", ["0", ["[]", "list", "len() = 0"]], ["1", ["[1, 2]", "list", "len() = 2", ["0", ["1", "int"]], ["1", ["2", "int"]]]]]}, "45": true}, "loop_iterations": {"46": [{"index": 0, "loops": {}}, {"index": 1, "loops": {"103": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}]}}, {"index": 2, "loops": {"103": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 3, "loops": {}}]}}, {"index": 97, "loops": {"103": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 191, "loops": {}}, {"index": 192, "loops": {}}, {"index": 193, "loops": {}}]}}, {"index": 98, "loops": {"103": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 193, "loops": {}}, {"index": 194, "loops": {}}, {"index": 195, "loops": {}}]}}, {"index": 99, "loops": {"103": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 195, "loops": {}}, {"index": 196, "loops": {}}, {"index": 197, "loops": {}}]}}], "174": [{"index": 0, "loops": {"225": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 1, "loops": {"225": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 2, "loops": {"225": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 97, "loops": {"225": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 98, "loops": {"225": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 99, "loops": {"225": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}], "47": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 3, "loops": {}}, {"index": 4, "loops": {}}, {"index": 5, "loops": {}}]}}, "exception": null}, {"traceback": null, "return_value": "120", "function": {"html_body": "<span data-index=\"4\" data-type=\"stmt\">@<span data-index=\"21\" data-type=\"expr\">eye</span>\ndef factorial(n):\n<span data-index=\"19\" data-type=\"stmt\">    if <span data-index=\"58\" data-type=\"expr\"><span data-index=\"119\" data-type=\"expr\">n</span> &lt;= 1</span>:\n        <span data-index=\"59\" data-type=\"stmt\">return 1</span></span>\n    <span data-index=\"20\" data-type=\"stmt\">return <span data-index=\"60\" data-type=\"expr\"><span data-index=\"123\" data-type=\"expr\">n</span> * <span data-index=\"125\" data-type=\"expr\"><span data-index=\"191\" data-type=\"expr\">factorial</span>(<span data-index=\"192\" data-type=\"expr\"><span data-index=\"241\" data-type=\"expr\">n</span> - 1</span>)</span></span></span></span>\n", "data": {"node_loops": {}}, "name": "factorial", "lineno": 7}, "arguments": [["n", "5"]], "data": {"num_special_types": 11, "type_names": ["MyClass", "NoneType", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "node_values": {"241": ["5", "int"], "58": ["False", "bool"], "123": ["5", "int"], "20": true, "192": ["4", "int"], "125": ["24", "int", {"inner_call": "test_id_3"}], "191": ["<function factorial at 0xABC>", "function", ["__wrapped__", ["<function factorial at 0xABC>", "function"]]], "60": ["120", "int"], "119": ["5", "int"], "19": true}, "loop_iterations": {}}, "exception": null}, {"traceback": null, "return_value": "24", "function": {"html_body": "<span data-index=\"4\" data-type=\"stmt\">@<span data-index=\"21\" data-type=\"expr\">eye</span>\ndef factorial(n):\n<span data-index=\"19\" data-type=\"stmt\">    if <span data-index=\"58\" data-type=\"expr\"><span data-index=\"119\" data-type=\"expr\">n</span> &lt;= 1</span>:\n        <span data-index=\"59\" data-type=\"stmt\">return 1</span></span>\n    <span data-index=\"20\" data-type=\"stmt\">return <span data-index=\"60\" data-type=\"expr\"><span data-index=\"123\" data-type=\"expr\">n</span> * <span data-index=\"125\" data-type=\"expr\"><span data-index=\"191\" data-type=\"expr\">factorial</span>(<span data-index=\"192\" data-type=\"expr\"><span data-index=\"241\" data-type=\"expr\">n</span> - 1</span>)</span></span></span></span>\n", "data": {"node_loops": {}}, "name": "factorial", "lineno": 7}, "arguments": [["n", "4"]], "data": {"num_special_types": 11, "type_names": ["MyClass", "NoneType", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "node_values": {"241": ["4", "int"], "58": ["False", "bool"], "123": ["4", "int"], "20": true, "192": ["3", "int"], "125": ["6", "int", {"inner_call": "test_id_4"}], "191": ["<function factorial at 0xABC>", "function", ["__wrapped__", ["<function factorial at 0xABC>", "function"]]], "60": ["24", "int"], "119": ["4", "int"], "19": true}, "loop_iterations": {}}, "exception": null}, {"traceback": null, "return_value": "6", "function": {"html_body": "<span data-index=\"4\" data-type=\"stmt\">@<span data-index=\"21\" data-type=\"expr\">eye</span>\ndef factorial(n):\n<span data-index=\"19\" data-type=\"stmt\">    if <span data-index=\"58\" data-type=\"expr\"><span data-index=\"119\" data-type=\"expr\">n</span> &lt;= 1</span>:\n        <span data-index=\"59\" data-type=\"stmt\">return 1</span></span>\n    <span data-index=\"20\" data-type=\"stmt\">return <span data-index=\"60\" data-type=\"expr\"><span data-index=\"123\" data-type=\"expr\">n</span> * <span data-index=\"125\" data-type=\"expr\"><span data-index=\"191\" data-type=\"expr\">factorial</span>(<span data-index=\"192\" data-type=\"expr\"><span data-index=\"241\" data-type=\"expr\">n</span> - 1</span>)</span></span></span></span>\n", "data": {"node_loops": {}}, "name": "factorial", "lineno": 7}, "arguments": [["n", "3"]], "data": {"num_special_types": 11, "type_names": ["MyClass", "NoneType", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "node_values": {"241": ["3", "int"], "58": ["False", "bool"], "123": ["3", "int"], "20": true, "192": ["2", "int"], "125": ["2", "int", {"inner_call": "test_id_5"}], "191": ["<function factorial at 0xABC>", "function", ["__wrapped__", ["<function factorial at 0xABC>", "function"]]], "60": ["6", "int"], "119": ["3", "int"], "19": true}, "loop_iterations": {}}, "exception": null}, {"traceback": null, "return_value": "2", "function": {"html_body": "<span data-index=\"4\" data-type=\"stmt\">@<span data-index=\"21\" data-type=\"expr\">eye</span>\ndef factorial(n):\n<span data-index=\"19\" data-type=\"stmt\">    if <span data-index=\"58\" data-type=\"expr\"><span data-index=\"119\" data-type=\"expr\">n</span> &lt;= 1</span>:\n        <span data-index=\"59\" data-type=\"stmt\">return 1</span></span>\n    <span data-index=\"20\" data-type=\"stmt\">return <span data-index=\"60\" data-type=\"expr\"><span data-index=\"123\" data-type=\"expr\">n</span> * <span data-index=\"125\" data-type=\"expr\"><span data-index=\"191\" data-type=\"expr\">factorial</span>(<span data-index=\"192\" data-type=\"expr\"><span data-index=\"241\" data-type=\"expr\">n</span> - 1</span>)</span></span></span></span>\n", "data": {"node_loops": {}}, "name": "factorial", "lineno": 7}, "arguments": [["n", "2"]], "data": {"num_special_types": 11, "type_names": ["MyClass", "NoneType", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "node_values": {"241": ["2", "int"], "58": ["False", "bool"], "123": ["2", "int"], "20": true, "192": ["1", "int"], "125": ["1", "int", {"inner_call": "test_id_6"}], "191": ["<function factorial at 0xABC>", "function", ["__wrapped__", ["<function factorial at 0xABC>", "function"]]], "60": ["2", "int"], "119": ["2", "int"], "19": true}, "loop_iterations": {}}, "exception": null}, {"traceback": null, "return_value": "1", "function": {"html_body": "<span data-index=\"4\" data-type=\"stmt\">@<span data-index=\"21\" data-type=\"expr\">eye</span>\ndef factorial(n):\n<span data-index=\"19\" data-type=\"stmt\">    if <span data-index=\"58\" data-type=\"expr\"><span data-index=\"119\" data-type=\"expr\">n</span> &lt;= 1</span>:\n        <span data-index=\"59\" data-type=\"stmt\">return 1</span></span>\n    <span data-index=\"20\" data-type=\"stmt\">return <span data-index=\"60\" data-type=\"expr\"><span data-index=\"123\" data-type=\"expr\">n</span> * <span data-index=\"125\" data-type=\"expr\"><span data-index=\"191\" data-type=\"expr\">factorial</span>(<span data-index=\"192\" data-type=\"expr\"><span data-index=\"241\" data-type=\"expr\">n</span> - 1</span>)</span></span></span></span>\n", "data": {"node_loops": {}}, "name": "factorial", "lineno": 7}, "arguments": [["n", "1"]], "data": {"num_special_types": 11, "type_names": ["MyClass", "NoneType", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "node_values": {"119": ["1", "int"], "19": true, "59": true, "58": ["True", "bool"]}, "loop_iterations": {}}, "exception": null}, {"traceback": null, "return_value": "None", "function": {"html_body": "<span data-index=\"8\" data-type=\"stmt\">@<span data-index=\"31\" data-type=\"expr\">eye</span>\ndef complex_args(pos1, pos2, key1=3, key2=4, *args, **kwargs):\n    <span data-index=\"30\" data-type=\"stmt\">pass</span></span>\n", "data": {"node_loops": {}}, "name": "complex_args", "lineno": 32}, "arguments": [["pos1", "[0, 1, 2, 3, 4, 5, ...]"], ["pos2", "'hello'"], ["key1", "3"], ["key2", "8"], ["args", "()"], ["kwargs", "{'kwarg1': {}}"]], "data": {"num_special_types": 11, "type_names": ["MyClass", "NoneType", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "node_values": {"30": true}, "loop_iterations": {}}, "exception": null}, {"traceback": null, "return_value": "None", "function": {"html_body": "<span data-index=\"10\" data-type=\"stmt\">@<span data-index=\"37\" data-type=\"expr\">eye</span>\ndef use_gen_1(g):\n<span data-index=\"36\" data-type=\"loop\">    for x in <span data-index=\"88\" data-type=\"expr\"><span data-index=\"145\" data-type=\"expr\">islice</span>(<span data-index=\"146\" data-type=\"expr\">g</span>, 3)</span>:\n        <span data-index=\"89\" data-type=\"stmt\"><span data-index=\"148\" data-type=\"expr\"><span data-index=\"205\" data-type=\"expr\">dummy</span>(<span data-index=\"206\" data-type=\"expr\">x</span>)</span></span></span></span>\n", "data": {"node_loops": {"148": [36], "206": [36], "89": [36], "205": [36]}}, "name": "use_gen_1", "lineno": 43}, "arguments": [["g", "<generator object gen at 0xABC>"]], "data": {"num_special_types": 11, "type_names": ["MyClass", "NoneType", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "node_values": {"36": true, "206": {"1": ["1", "int"], "0": ["0", "int"], "2": ["2", "int"]}, "89": {"1": true, "0": true, "2": true}, "148": {"1": ["None", "NoneType"], "0": ["None", "NoneType"], "2": ["None", "NoneType"]}, "146": ["<generator object gen at 0xABC>", "generator"], "88": ["<itertools.islice object at 0xABC>", "islice"], "205": {"1": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "2": ["<function dummy at 0xABC>", "function"]}, "145": ["<class 'itertools.islice'>", "type", ["__doc__", ["'islice(iterab...s an iterator.'", "str", "len() = 454"]], ["__getattribute__", ["<slot wrapper '__getattribut...f 'itertools.islice' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.islice' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["__next__", ["<slot wrapper '__next__' of 'itertools.islice' objects>", "wrapper_descriptor"]], ["__reduce__", ["<method '__reduce__' of 'itertools.islice' objects>", "method_descriptor"]], ["__setstate__", ["<method '__setstate__' of 'itertools.islice' objects>", "method_descriptor"]]]}, "loop_iterations": {"36": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}]}}, "exception": null}, {"traceback": null, "return_value": "None", "function": {"html_body": "<span data-index=\"9\" data-type=\"stmt\">@<span data-index=\"34\" data-type=\"expr\">eye</span>\ndef gen():\n<span data-index=\"33\" data-type=\"loop\">    for i in <span data-index=\"83\" data-type=\"expr\"><span data-index=\"141\" data-type=\"expr\">range</span>(6)</span>:\n        <span data-index=\"84\" data-type=\"stmt\"><span data-index=\"143\" data-type=\"expr\">yield <span data-index=\"202\" data-type=\"expr\">i</span></span></span></span></span>\n", "data": {"node_loops": {"84": [33], "202": [33], "143": [33]}}, "name": "gen", "lineno": 37}, "arguments": [], "data": {"num_special_types": 11, "type_names": ["MyClass", "NoneType", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "node_values": {"33": true, "84": {"1": true, "0": true, "5": true, "4": true, "3": true, "2": true}, "202": {"1": ["1", "int"], "0": ["0", "int"], "5": ["5", "int"], "4": ["4", "int"], "3": ["3", "int"], "2": ["2", "int"]}, "143": {"1": ["None", "NoneType"], "0": ["None", "NoneType"], "5": ["None", "NoneType"], "4": ["None", "NoneType"], "3": ["None", "NoneType"], "2": ["None", "NoneType"]}, "83": ["range(0, 6)", "range", "len() = 6"]}, "loop_iterations": {"33": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 3, "loops": {}}, {"index": 4, "loops": {}}, {"index": 5, "loops": {}}]}}, "exception": null}, {"traceback": null, "return_value": "None", "function": {"html_body": "<span data-index=\"11\" data-type=\"stmt\">@<span data-index=\"40\" data-type=\"expr\">eye</span>\ndef use_gen_2(g):\n<span data-index=\"39\" data-type=\"loop\">    for y in <span data-index=\"93\" data-type=\"expr\">g</span>:\n        <span data-index=\"94\" data-type=\"stmt\"><span data-index=\"151\" data-type=\"expr\"><span data-index=\"207\" data-type=\"expr\">dummy</span>(<span data-index=\"208\" data-type=\"expr\">y</span>)</span></span></span></span>\n", "data": {"node_loops": {"151": [39], "94": [39], "208": [39], "207": [39]}}, "name": "use_gen_2", "lineno": 49}, "arguments": [["g", "<generator object gen at 0xABC>"]], "data": {"num_special_types": 11, "type_names": ["MyClass", "NoneType", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "node_values": {"207": {"1": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "2": ["<function dummy at 0xABC>", "function"]}, "39": true, "208": {"1": ["4", "int"], "0": ["3", "int"], "2": ["5", "int"]}, "93": ["<generator object gen at 0xABC>", "generator"], "151": {"1": ["None", "NoneType"], "0": ["None", "NoneType"], "2": ["None", "NoneType"]}, "94": {"1": true, "0": true, "2": true}}, "loop_iterations": {"39": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}]}}, "exception": null}]