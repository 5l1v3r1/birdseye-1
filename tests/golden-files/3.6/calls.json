[{"arguments": [], "return_value": "None", "exception": null, "traceback": null, "data": {"node_values": {"45": true, "310": ["<function factorial at 0xABC>", "function", {}, ["__wrapped__", ["<function factorial at 0xABC>", "function", {}]]], "209": ["6", "int", {"inner_call": "test_id_2"}], "121": ["True", "bool", {}], "46": true, "47": true, "125": ["range(0, 100)", "range", {"len": 100}], "48": true, "129": ["range(0, 6)", "range", {"len": 6}], "49": true, "327": ["<class 'tests.golden_script.MyClass'>", "type", {}, ["__add__", ["<function MyClass.__add__ at 0xABC>", "function", {}, ["__wrapped__", ["<function MyClass.__add__ at 0xABC>", "function", {}]]]], ["__dict__", ["<attribute '__dict__' of 'MyClass' objects>", "getset_descriptor", {}]], ["__doc__", ["None", "NoneType", {}]], ["__enter__", ["<function MyClass.__enter__ at 0xABC>", "function", {}, ["__wrapped__", ["<function MyClass.__enter__ at 0xABC>", "function", {}]]]], ["__exit__", ["<function MyClass.__exit__ at 0xABC>", "function", {}, ["__wrapped__", ["<function MyClass.__exit__ at 0xABC>", "function", {}]]]], ["__module__", ["'tests.golden_script'", "str", {"len": 19}]], ["__weakref__", ["<attribute '__weakref__' of 'MyClass' objects>", "getset_descriptor", {}]]], "230": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass", {}], "328": ["<class 'tests.golden_script.MyClass'>", "type", {}, ["__add__", ["<function MyClass.__add__ at 0xABC>", "function", {}, ["__wrapped__", ["<function MyClass.__add__ at 0xABC>", "function", {}]]]], ["__dict__", ["<attribute '__dict__' of 'MyClass' objects>", "getset_descriptor", {}]], ["__doc__", ["None", "NoneType", {}]], ["__enter__", ["<function MyClass.__enter__ at 0xABC>", "function", {}, ["__wrapped__", ["<function MyClass.__enter__ at 0xABC>", "function", {}]]]], ["__exit__", ["<function MyClass.__exit__ at 0xABC>", "function", {}, ["__wrapped__", ["<function MyClass.__exit__ at 0xABC>", "function", {}]]]], ["__module__", ["'tests.golden_script'", "str", {"len": 19}]], ["__weakref__", ["<attribute '__weakref__' of 'MyClass' objects>", "getset_descriptor", {}]]], "232": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass", {}], "133": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass", {"inner_call": "test_id_5"}], "50": true, "333": ["range(0, 100)", "range", {"len": 100}], "236": true, "135": ["[[0, 1, 2, 3, 4, 5, ...], [1, 2, 3, 4, 5, 6, ...], [2, 3, 4, 5, 6, 7, ...], [3, 4, 5, 6, 7, 8, ...], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", {"len": 100}, ["0", ["0", "int", {}]], ["1", ["1", "int", {}]], ["2", ["2", "int", {}]], ["97", ["97", "int", {}]], ["98", ["98", "int", {}]], ["99", ["99", "int", {}]]]], ["1", ["[1, 2, 3, 4, 5, 6, ...]", "list", {"len": 100}, ["0", ["1", "int", {}]], ["1", ["2", "int", {}]], ["2", ["3", "int", {}]], ["97", ["98", "int", {}]], ["98", ["99", "int", {}]], ["99", ["100", "int", {}]]]], ["2", ["[2, 3, 4, 5, 6, 7, ...]", "list", {"len": 100}, ["0", ["2", "int", {}]], ["1", ["3", "int", {}]], ["2", ["4", "int", {}]], ["97", ["99", "int", {}]], ["98", ["100", "int", {}]], ["99", ["101", "int", {}]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 100}, ["0", ["97", "int", {}]], ["1", ["98", "int", {}]], ["2", ["99", "int", {}]], ["97", ["194", "int", {}]], ["98", ["195", "int", {}]], ["99", ["196", "int", {}]]]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 100}, ["0", ["98", "int", {}]], ["1", ["99", "int", {}]], ["2", ["100", "int", {}]], ["97", ["195", "int", {}]], ["98", ["196", "int", {}]], ["99", ["197", "int", {}]]]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 100}, ["0", ["99", "int", {}]], ["1", ["100", "int", {}]], ["2", ["101", "int", {}]], ["97", ["196", "int", {}]], ["98", ["197", "int", {}]], ["99", ["198", "int", {}]]]]], "233": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass", {}], "51": true, "237": ["<function dummy at 0xABC>", "function", {}], "428": ["range(0, 4)", "range", {"len": 4}], "238": ["<generator object main.<locals>.<genexpr> at 0xABC>", "generator", {}], "136": ["None", "NoneType", {}], "52": true, "239": ["<function dummy at 0xABC>", "function", {}], "431": ["range(0, 4)", "range", {"len": 4}], "339": true, "240": ["{0, 1, 2, 3}", "set", {"len": 4}, ["<0>", ["0", "int", {}]], ["<1>", ["1", "int", {}]], ["<2>", ["2", "int", {}]], ["<3>", ["3", "int", {}]]], "137": ["None", "NoneType", {}], "53": true, "241": ["<function dummy at 0xABC>", "function", {}], "435": ["range(0, 1)", "range", {"len": 1}], "343": true, "242": ["{0: 0}", "dict", {"len": 1}, ["0", ["0", "int", {}]]], "138": ["None", "NoneType", {}], "54": true, "243": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass", {}, ["list", ["[[0, 1, 2, 3, 4, 5, ...], [1, 2, 3, 4, 5, 6, ...], [2, 3, 4, 5, 6, 7, ...], [3, 4, 5, 6, 7, 8, ...], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", {"len": 100}, ["0", ["0", "int", {}]], ["1", ["1", "int", {}]], ["2", ["2", "int", {}]], ["97", ["97", "int", {}]], ["98", ["98", "int", {}]], ["99", ["99", "int", {}]]]], ["1", ["[1, 2, 3, 4, 5, 6, ...]", "list", {"len": 100}, ["0", ["1", "int", {}]], ["1", ["2", "int", {}]], ["2", ["3", "int", {}]], ["97", ["98", "int", {}]], ["98", ["99", "int", {}]], ["99", ["100", "int", {}]]]], ["2", ["[2, 3, 4, 5, 6, 7, ...]", "list", {"len": 100}, ["0", ["2", "int", {}]], ["1", ["3", "int", {}]], ["2", ["4", "int", {}]], ["97", ["99", "int", {}]], ["98", ["100", "int", {}]], ["99", ["101", "int", {}]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 100}, ["0", ["97", "int", {}]], ["1", ["98", "int", {}]], ["2", ["99", "int", {}]], ["97", ["194", "int", {}]], ["98", ["195", "int", {}]], ["99", ["196", "int", {}]]]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 100}, ["0", ["98", "int", {}]], ["1", ["99", "int", {}]], ["2", ["100", "int", {}]], ["97", ["195", "int", {}]], ["98", ["196", "int", {}]], ["99", ["197", "int", {}]]]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 100}, ["0", ["99", "int", {}]], ["1", ["100", "int", {}]], ["2", ["101", "int", {}]], ["97", ["196", "int", {}]], ["98", ["197", "int", {}]], ["99", ["198", "int", {}]]]]]]], "140": true, "55": true, "244": ["<function dummy at 0xABC>", "function", {}], "346": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass", {}, ["list", ["[[0, 1, 2, 3, 4, 5, ...], [1, 2, 3, 4, 5, 6, ...], [2, 3, 4, 5, 6, 7, ...], [3, 4, 5, 6, 7, 8, ...], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", {"len": 100}, ["0", ["0", "int", {}]], ["1", ["1", "int", {}]], ["2", ["2", "int", {}]], ["97", ["97", "int", {}]], ["98", ["98", "int", {}]], ["99", ["99", "int", {}]]]], ["1", ["[1, 2, 3, 4, 5, 6, ...]", "list", {"len": 100}, ["0", ["1", "int", {}]], ["1", ["2", "int", {}]], ["2", ["3", "int", {}]], ["97", ["98", "int", {}]], ["98", ["99", "int", {}]], ["99", ["100", "int", {}]]]], ["2", ["[2, 3, 4, 5, 6, 7, ...]", "list", {"len": 100}, ["0", ["2", "int", {}]], ["1", ["3", "int", {}]], ["2", ["4", "int", {}]], ["97", ["99", "int", {}]], ["98", ["100", "int", {}]], ["99", ["101", "int", {}]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 100}, ["0", ["97", "int", {}]], ["1", ["98", "int", {}]], ["2", ["99", "int", {}]], ["97", ["194", "int", {}]], ["98", ["195", "int", {}]], ["99", ["196", "int", {}]]]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 100}, ["0", ["98", "int", {}]], ["1", ["99", "int", {}]], ["2", ["100", "int", {}]], ["97", ["195", "int", {}]], ["98", ["196", "int", {}]], ["99", ["197", "int", {}]]]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 100}, ["0", ["99", "int", {}]], ["1", ["100", "int", {}]], ["2", ["101", "int", {}]], ["97", ["196", "int", {}]], ["98", ["197", "int", {}]], ["99", ["198", "int", {}]]]]]]], "437": ["<class 'tests.golden_script.SlotClass'>", "type", {}, ["__doc__", ["None", "NoneType", {}]], ["__init__", ["<function SlotClass.__init__ at 0xABC>", "function", {}]], ["__module__", ["'tests.golden_script'", "str", {"len": 19}]], ["__slots__", ["('slot1',)", "tuple", {"len": 1}, ["0", ["'slot1'", "str", {"len": 5}]]]], ["slot1", ["<member 'slot1' of 'SlotClass' objects>", "member_descriptor", {}]]], "348": ["<tests.golden_script.SlotClass object at 0xABC>", "SlotClass", {}, ["slot1", ["3", "int", {}]]], "245": ["<tests.golden_script.SlotClass object at 0xABC>", "SlotClass", {"inner_call": "test_id_8"}, ["slot1", ["3", "int", {}]]], "141": ["None", "NoneType", {}], "56": true, "349": ["<function complex_args at 0xABC>", "function", {}, ["__wrapped__", ["<function complex_args at 0xABC>", "function", {}]]], "440": ["range(0, 1000)", "range", {"len": 1000}], "350": ["[0, 1, 2, 3, 4, 5, ...]", "list", {"len": 1000}, ["0", ["0", "int", {}]], ["1", ["1", "int", {}]], ["2", ["2", "int", {}]], ["997", ["997", "int", {}]], ["998", ["998", "int", {}]], ["999", ["999", "int", {}]]], "246": ["[[0, 1, 2, 3, 4, 5, ...], 'hello', {'kwarg1': {'key': 'value'}}]", "list", {"len": 3, "inner_call": "test_id_9"}, ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", {"len": 1000}, ["0", ["0", "int", {}]], ["1", ["1", "int", {}]], ["2", ["2", "int", {}]], ["997", ["997", "int", {}]], ["998", ["998", "int", {}]], ["999", ["999", "int", {}]]]], ["1", ["'hello'", "str", {"len": 5}]], ["2", ["{'kwarg1': {'key': 'value'}}", "dict", {"len": 1}, ["'kwarg1'", ["{'key': 'value'}", "dict", {"len": 1}, ["'key'", ["'value'", "str", {"len": 5}]]]]]]], "444": ["range(0, 1000)", "range", {"len": 1000}], "354": ["[0, 1, 2, 3, 4, 5, ...]", "list", {"len": 1000}, ["0", ["0", "int", {}]], ["1", ["1", "int", {}]], ["2", ["2", "int", {}]], ["997", ["997", "int", {}]], ["998", ["998", "int", {}]], ["999", ["999", "int", {}]]], "356": ["{'kwarg1': {'key': 'value'}}", "dict", {"len": 1}, ["'kwarg1'", ["{'key': 'value'}", "dict", {"len": 1}, ["'key'", ["'value'", "str", {"len": 5}]]]]], "248": ["[[0, 1, 2, 3, 4, 5, ...], 'hello', {'kwarg1': {'key': 'value'}}]", "list", {"len": 3}, ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", {"len": 1000}, ["0", ["0", "int", {}]], ["1", ["1", "int", {}]], ["2", ["2", "int", {}]], ["997", ["997", "int", {}]], ["998", ["998", "int", {}]], ["999", ["999", "int", {}]]]], ["1", ["'hello'", "str", {"len": 5}]], ["2", ["{'kwarg1': {'key': 'value'}}", "dict", {"len": 1}, ["'kwarg1'", ["{'key': 'value'}", "dict", {"len": 1}, ["'key'", ["'value'", "str", {"len": 5}]]]]]]], "142": ["True", "bool", {}], "57": true, "358": ["<function complex_args at 0xABC>", "function", {}, ["__wrapped__", ["<function complex_args at 0xABC>", "function", {}]]], "249": ["[1, 2, {'k': 23}]", "list", {"len": 3, "inner_call": "test_id_10"}, ["0", ["1", "int", {}]], ["1", ["2", "int", {}]], ["2", ["{'k': 23}", "dict", {"len": 1}, ["'k'", ["23", "int", {}]]]]], "143": ["True", "bool", {}], "58": true, "366": ["'1 + 2'", "str", {"len": 5}], "252": ["3", "int", {}], "144": ["True", "bool", {}], "59": true, "60": true, "61": true, "257": ["6", "int", {}], "150": ["True", "bool", {}], "62": true, "63": true, "261": ["<function dummy at 0xABC>", "function", {}], "152": ["None", "NoneType", {}], "64": true, "265": ["2", "int", {}], "153": ["True", "bool", {}], "65": true, "268": ["(1, 2)", "tuple", {"len": 2}, ["0", ["1", "int", {}]], ["1", ["2", "int", {}]]], "154": ["True", "bool", {}], "66": true, "155": true, "271": ["ValueError()", "ValueError", {}], "276": true, "159": true, "381": ["<function dummy at 0xABC>", "function", {}], "277": ["None", "NoneType", {}], "67": true, "68": true, "382": ["<function main.<locals>.<lambda> at 0xABC>", "function", {}], "278": ["8", "int", {}], "162": ["True", "bool", {}], "69": true, "70": true, "71": true, "282": ["4", "int", {}], "165": ["True", "bool", {}], "72": true, "286": ["<function gen at 0xABC>", "function", {}, ["__wrapped__", ["<function gen at 0xABC>", "function", {}]]], "167": ["<generator object gen at 0xABC>", "generator", {}], "73": true, "287": ["<function use_gen_1 at 0xABC>", "function", {}, ["__wrapped__", ["<function use_gen_1 at 0xABC>", "function", {}]]], "288": ["<generator object gen at 0xABC>", "generator", {}], "168": ["None", "NoneType", {"inner_call": "test_id_11"}], "74": true, "289": ["<function use_gen_2 at 0xABC>", "function", {}, ["__wrapped__", ["<function use_gen_2 at 0xABC>", "function", {}]]], "290": ["<generator object gen at 0xABC>", "generator", {}], "169": ["None", "NoneType", {"inner_call": "test_id_13"}], "126": {"0": true, "1": true, "2": true, "3": true, "4": true, "5": true}, "401": {"0": ["[]", "list", {"len": 0}], "1": ["[[]]", "list", {"len": 1}, ["0", ["[]", "list", {"len": 0}]]], "2": ["[[], [1, 2]]", "list", {"len": 2}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}, ["0", ["1", "int", {}]], ["1", ["2", "int", {}]]]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 97}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}, ["0", ["1", "int", {}]], ["1", ["2", "int", {}]]]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}, ["0", ["2", "int", {}]], ["1", ["3", "int", {}]], ["2", ["4", "int", {}]], ["3", ["5", "int", {}]]]], ["94", ["[94, 95, 96, 97, 98, 99, ...]", "list", {"len": 188}, ["0", ["94", "int", {}]], ["1", ["95", "int", {}]], ["2", ["96", "int", {}]], ["185", ["279", "int", {}]], ["186", ["280", "int", {}]], ["187", ["281", "int", {}]]]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}, ["0", ["95", "int", {}]], ["1", ["96", "int", {}]], ["2", ["97", "int", {}]], ["187", ["282", "int", {}]], ["188", ["283", "int", {}]], ["189", ["284", "int", {}]]]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}, ["0", ["96", "int", {}]], ["1", ["97", "int", {}]], ["2", ["98", "int", {}]], ["189", ["285", "int", {}]], ["190", ["286", "int", {}]], ["191", ["287", "int", {}]]]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}, ["0", ["1", "int", {}]], ["1", ["2", "int", {}]]]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}, ["0", ["2", "int", {}]], ["1", ["3", "int", {}]], ["2", ["4", "int", {}]], ["3", ["5", "int", {}]]]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}, ["0", ["95", "int", {}]], ["1", ["96", "int", {}]], ["2", ["97", "int", {}]], ["187", ["282", "int", {}]], ["188", ["283", "int", {}]], ["189", ["284", "int", {}]]]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}, ["0", ["96", "int", {}]], ["1", ["97", "int", {}]], ["2", ["98", "int", {}]], ["189", ["285", "int", {}]], ["190", ["286", "int", {}]], ["191", ["287", "int", {}]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}, ["0", ["97", "int", {}]], ["1", ["98", "int", {}]], ["2", ["99", "int", {}]], ["191", ["288", "int", {}]], ["192", ["289", "int", {}]], ["193", ["290", "int", {}]]]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}, ["0", ["1", "int", {}]], ["1", ["2", "int", {}]]]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}, ["0", ["2", "int", {}]], ["1", ["3", "int", {}]], ["2", ["4", "int", {}]], ["3", ["5", "int", {}]]]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}, ["0", ["96", "int", {}]], ["1", ["97", "int", {}]], ["2", ["98", "int", {}]], ["189", ["285", "int", {}]], ["190", ["286", "int", {}]], ["191", ["287", "int", {}]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}, ["0", ["97", "int", {}]], ["1", ["98", "int", {}]], ["2", ["99", "int", {}]], ["191", ["288", "int", {}]], ["192", ["289", "int", {}]], ["193", ["290", "int", {}]]]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}, ["0", ["98", "int", {}]], ["1", ["99", "int", {}]], ["2", ["100", "int", {}]], ["193", ["291", "int", {}]], ["194", ["292", "int", {}]], ["195", ["293", "int", {}]]]]]}, "313": {"0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "4": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "5": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}]}, "217": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}], "2": ["None", "NoneType", {}], "3": ["None", "NoneType", {}], "4": ["None", "NoneType", {}], "5": ["None", "NoneType", {}]}, "127": {"0": true, "1": true, "2": true, "3": true, "4": true, "5": true}, "407": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["97", "int", {}], "4": ["98", "int", {}], "5": ["99", "int", {}]}, "317": {"0": ["0", "int", {}], "1": ["2", "int", {}], "2": ["4", "int", {}], "3": ["194", "int", {}], "4": ["196", "int", {}], "5": ["198", "int", {}]}, "219": {"0": ["range(0, 0)", "range", {"len": 0}], "1": ["range(0, 2)", "range", {"len": 2}], "2": ["range(0, 4)", "range", {"len": 4}], "3": ["range(0, 194)", "range", {"len": 194}], "4": ["range(0, 196)", "range", {"len": 196}], "5": ["range(0, 198)", "range", {"len": 198}]}, "220": {"1": {"0": true, "1": true}, "2": {"0": true, "1": true, "2": true, "3": true}, "3": {"0": true, "1": true, "2": true, "3": true, "4": true, "5": true}, "4": {"0": true, "1": true, "2": true, "3": true, "4": true, "5": true}, "5": {"0": true, "1": true, "2": true, "3": true, "4": true, "5": true}}, "523": {"1": {"0": ["[[], []]", "list", {"len": 2}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[]", "list", {"len": 0}]]], "1": ["[[], [1]]", "list", {"len": 2}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1]", "list", {"len": 1}]]]}, "2": {"0": ["[[], [1, 2], []]", "list", {"len": 3}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[]", "list", {"len": 0}]]], "1": ["[[], [1, 2], [2]]", "list", {"len": 3}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2]", "list", {"len": 1}]]], "2": ["[[], [1, 2], [2, 3]]", "list", {"len": 3}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3]", "list", {"len": 2}]]], "3": ["[[], [1, 2], [2, 3, 4]]", "list", {"len": 3}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4]", "list", {"len": 3}]]]}, "3": {"0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[]", "list", {"len": 0}]]], "1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97]", "list", {"len": 1}]]], "2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98]", "list", {"len": 2}]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 191}]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 192}]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 193}]]]}, "4": {"0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[]", "list", {"len": 0}]]], "1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98]", "list", {"len": 1}]]], "2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99]", "list", {"len": 2}]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 193}]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 194}]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 195}]]]}, "5": {"0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]], ["99", ["[]", "list", {"len": 0}]]], "1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]], ["99", ["[99]", "list", {"len": 1}]]], "2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]], ["99", ["[99, 100]", "list", {"len": 2}]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 195}]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 196}]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 197}]]]}}, "474": {"1": {"0": ["[]", "list", {"len": 0}], "1": ["[1]", "list", {"len": 1}, ["0", ["1", "int", {}]]]}, "2": {"0": ["[]", "list", {"len": 0}], "1": ["[2]", "list", {"len": 1}, ["0", ["2", "int", {}]]], "2": ["[2, 3]", "list", {"len": 2}, ["0", ["2", "int", {}]], ["1", ["3", "int", {}]]], "3": ["[2, 3, 4]", "list", {"len": 3}, ["0", ["2", "int", {}]], ["1", ["3", "int", {}]], ["2", ["4", "int", {}]]]}, "3": {"0": ["[]", "list", {"len": 0}], "1": ["[97]", "list", {"len": 1}, ["0", ["97", "int", {}]]], "2": ["[97, 98]", "list", {"len": 2}, ["0", ["97", "int", {}]], ["1", ["98", "int", {}]]], "3": ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 191}, ["0", ["97", "int", {}]], ["1", ["98", "int", {}]], ["2", ["99", "int", {}]], ["188", ["285", "int", {}]], ["189", ["286", "int", {}]], ["190", ["287", "int", {}]]], "4": ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 192}, ["0", ["97", "int", {}]], ["1", ["98", "int", {}]], ["2", ["99", "int", {}]], ["189", ["286", "int", {}]], ["190", ["287", "int", {}]], ["191", ["288", "int", {}]]], "5": ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 193}, ["0", ["97", "int", {}]], ["1", ["98", "int", {}]], ["2", ["99", "int", {}]], ["190", ["287", "int", {}]], ["191", ["288", "int", {}]], ["192", ["289", "int", {}]]]}, "4": {"0": ["[]", "list", {"len": 0}], "1": ["[98]", "list", {"len": 1}, ["0", ["98", "int", {}]]], "2": ["[98, 99]", "list", {"len": 2}, ["0", ["98", "int", {}]], ["1", ["99", "int", {}]]], "3": ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 193}, ["0", ["98", "int", {}]], ["1", ["99", "int", {}]], ["2", ["100", "int", {}]], ["190", ["288", "int", {}]], ["191", ["289", "int", {}]], ["192", ["290", "int", {}]]], "4": ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 194}, ["0", ["98", "int", {}]], ["1", ["99", "int", {}]], ["2", ["100", "int", {}]], ["191", ["289", "int", {}]], ["192", ["290", "int", {}]], ["193", ["291", "int", {}]]], "5": ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 195}, ["0", ["98", "int", {}]], ["1", ["99", "int", {}]], ["2", ["100", "int", {}]], ["192", ["290", "int", {}]], ["193", ["291", "int", {}]], ["194", ["292", "int", {}]]]}, "5": {"0": ["[]", "list", {"len": 0}], "1": ["[99]", "list", {"len": 1}, ["0", ["99", "int", {}]]], "2": ["[99, 100]", "list", {"len": 2}, ["0", ["99", "int", {}]], ["1", ["100", "int", {}]]], "3": ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 195}, ["0", ["99", "int", {}]], ["1", ["100", "int", {}]], ["2", ["101", "int", {}]], ["192", ["291", "int", {}]], ["193", ["292", "int", {}]], ["194", ["293", "int", {}]]], "4": ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 196}, ["0", ["99", "int", {}]], ["1", ["100", "int", {}]], ["2", ["101", "int", {}]], ["193", ["292", "int", {}]], ["194", ["293", "int", {}]], ["195", ["294", "int", {}]]], "5": ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 197}, ["0", ["99", "int", {}]], ["1", ["100", "int", {}]], ["2", ["101", "int", {}]], ["194", ["293", "int", {}]], ["195", ["294", "int", {}]], ["196", ["295", "int", {}]]]}}, "408": {"1": {"0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}]}, "2": {"0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}]}, "3": {"0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "4": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "5": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}]}, "4": {"0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "4": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "5": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}]}, "5": {"0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "4": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}], "5": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method", {}]}}, "476": {"1": {"0": ["1", "int", {}], "1": ["1", "int", {}]}, "2": {"0": ["2", "int", {}], "1": ["2", "int", {}], "2": ["2", "int", {}], "3": ["2", "int", {}]}, "3": {"0": ["97", "int", {}], "1": ["97", "int", {}], "2": ["97", "int", {}], "3": ["97", "int", {}], "4": ["97", "int", {}], "5": ["97", "int", {}]}, "4": {"0": ["98", "int", {}], "1": ["98", "int", {}], "2": ["98", "int", {}], "3": ["98", "int", {}], "4": ["98", "int", {}], "5": ["98", "int", {}]}, "5": {"0": ["99", "int", {}], "1": ["99", "int", {}], "2": ["99", "int", {}], "3": ["99", "int", {}], "4": ["99", "int", {}], "5": ["99", "int", {}]}}, "478": {"1": {"0": ["0", "int", {}], "1": ["1", "int", {}]}, "2": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["3", "int", {}]}, "3": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["191", "int", {}], "4": ["192", "int", {}], "5": ["193", "int", {}]}, "4": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["193", "int", {}], "4": ["194", "int", {}], "5": ["195", "int", {}]}, "5": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["195", "int", {}], "4": ["196", "int", {}], "5": ["197", "int", {}]}}, "409": {"1": {"0": ["1", "int", {}], "1": ["2", "int", {}]}, "2": {"0": ["2", "int", {}], "1": ["3", "int", {}], "2": ["4", "int", {}], "3": ["5", "int", {}]}, "3": {"0": ["97", "int", {}], "1": ["98", "int", {}], "2": ["99", "int", {}], "3": ["288", "int", {}], "4": ["289", "int", {}], "5": ["290", "int", {}]}, "4": {"0": ["98", "int", {}], "1": ["99", "int", {}], "2": ["100", "int", {}], "3": ["291", "int", {}], "4": ["292", "int", {}], "5": ["293", "int", {}]}, "5": {"0": ["99", "int", {}], "1": ["100", "int", {}], "2": ["101", "int", {}], "3": ["294", "int", {}], "4": ["295", "int", {}], "5": ["296", "int", {}]}}, "318": {"1": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}]}, "2": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}], "2": ["None", "NoneType", {}], "3": ["None", "NoneType", {}]}, "3": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}], "2": ["None", "NoneType", {}], "3": ["None", "NoneType", {}], "4": ["None", "NoneType", {}], "5": ["None", "NoneType", {}]}, "4": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}], "2": ["None", "NoneType", {}], "3": ["None", "NoneType", {}], "4": ["None", "NoneType", {}], "5": ["None", "NoneType", {}]}, "5": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}], "2": ["None", "NoneType", {}], "3": ["None", "NoneType", {}], "4": ["None", "NoneType", {}], "5": ["None", "NoneType", {}]}}, "221": {"1": {"0": true, "1": true}, "2": {"0": true, "1": true, "2": true, "3": true}, "3": {"0": true, "1": true, "2": true, "3": true, "4": true, "5": true}, "4": {"0": true, "1": true, "2": true, "3": true, "4": true, "5": true}, "5": {"0": true, "1": true, "2": true, "3": true, "4": true, "5": true}}, "410": {"1": {"0": ["<function dummy at 0xABC>", "function", {}], "1": ["<function dummy at 0xABC>", "function", {}]}, "2": {"0": ["<function dummy at 0xABC>", "function", {}], "1": ["<function dummy at 0xABC>", "function", {}], "2": ["<function dummy at 0xABC>", "function", {}], "3": ["<function dummy at 0xABC>", "function", {}]}, "3": {"0": ["<function dummy at 0xABC>", "function", {}], "1": ["<function dummy at 0xABC>", "function", {}], "2": ["<function dummy at 0xABC>", "function", {}], "3": ["<function dummy at 0xABC>", "function", {}], "4": ["<function dummy at 0xABC>", "function", {}], "5": ["<function dummy at 0xABC>", "function", {}]}, "4": {"0": ["<function dummy at 0xABC>", "function", {}], "1": ["<function dummy at 0xABC>", "function", {}], "2": ["<function dummy at 0xABC>", "function", {}], "3": ["<function dummy at 0xABC>", "function", {}], "4": ["<function dummy at 0xABC>", "function", {}], "5": ["<function dummy at 0xABC>", "function", {}]}, "5": {"0": ["<function dummy at 0xABC>", "function", {}], "1": ["<function dummy at 0xABC>", "function", {}], "2": ["<function dummy at 0xABC>", "function", {}], "3": ["<function dummy at 0xABC>", "function", {}], "4": ["<function dummy at 0xABC>", "function", {}], "5": ["<function dummy at 0xABC>", "function", {}]}}, "411": {"1": {"0": ["[[], [1]]", "list", {"len": 2}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1]", "list", {"len": 1}]]], "1": ["[[], [1, 2]]", "list", {"len": 2}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]]]}, "2": {"0": ["[[], [1, 2], [2]]", "list", {"len": 3}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2]", "list", {"len": 1}]]], "1": ["[[], [1, 2], [2, 3]]", "list", {"len": 3}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3]", "list", {"len": 2}]]], "2": ["[[], [1, 2], [2, 3, 4]]", "list", {"len": 3}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4]", "list", {"len": 3}]]], "3": ["[[], [1, 2], [2, 3, 4, 5]]", "list", {"len": 3}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]]]}, "3": {"0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97]", "list", {"len": 1}]]], "1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98]", "list", {"len": 2}]]], "2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99]", "list", {"len": 3}]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 192}]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 193}]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 98}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", {"len": 190}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]]]}, "4": {"0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98]", "list", {"len": 1}]]], "1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99]", "list", {"len": 2}]]], "2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100]", "list", {"len": 3}]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 194}]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 195}]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 99}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", {"len": 192}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]]]}, "5": {"0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]], ["99", ["[99]", "list", {"len": 1}]]], "1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]], ["99", ["[99, 100]", "list", {"len": 2}]]], "2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]], ["99", ["[99, 100, 101]", "list", {"len": 3}]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 196}]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 197}]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", {"len": 100}, ["0", ["[]", "list", {"len": 0}]], ["1", ["[1, 2]", "list", {"len": 2}]], ["2", ["[2, 3, 4, 5]", "list", {"len": 4}]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 194}]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 196}]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 198}]]]}}, "319": {"1": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}]}, "2": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}], "2": ["None", "NoneType", {}], "3": ["None", "NoneType", {}]}, "3": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}], "2": ["None", "NoneType", {}], "3": ["None", "NoneType", {}], "4": ["None", "NoneType", {}], "5": ["None", "NoneType", {}]}, "4": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}], "2": ["None", "NoneType", {}], "3": ["None", "NoneType", {}], "4": ["None", "NoneType", {}], "5": ["None", "NoneType", {}]}, "5": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}], "2": ["None", "NoneType", {}], "3": ["None", "NoneType", {}], "4": ["None", "NoneType", {}], "5": ["None", "NoneType", {}]}}, "130": {"0": true, "1": true, "2": true, "3": true}, "225": {"0": true, "1": true, "2": true, "3": true}, "412": {"0": ["<function dummy at 0xABC>", "function", {}], "1": ["<function dummy at 0xABC>", "function", {}], "2": ["<function dummy at 0xABC>", "function", {}], "3": ["<function dummy at 0xABC>", "function", {}]}, "542": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["3", "int", {}]}, "530": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["0", "int", {}], "3": ["1", "int", {}]}, "482": {"0": ["ZeroDivisionError: division by zero\n", -1, {}], "1": ["1.0", "float", {}], "2": ["ZeroDivisionError: division by zero\n", -1, {}], "3": ["1.0", "float", {}]}, "323": {"0": true, "2": true}, "413": {"1": ["11.0", "float", {}], "3": ["11.0", "float", {}]}, "321": {"1": ["None", "NoneType", {}], "3": ["None", "NoneType", {}]}, "131": {"1": true, "3": true}, "324": {"1": ["1", "int", {}], "3": ["3", "int", {}]}, "227": {"1": ["False", "bool", {}], "3": ["True", "bool", {}]}, "228": {"3": true}, "422": {"0": ["range(0, 100)", "range", {"len": 100}], "1": ["range(0, 100)", "range", {"len": 100}], "2": ["range(0, 100)", "range", {"len": 100}], "3": ["range(0, 100)", "range", {"len": 100}], "4": ["range(0, 100)", "range", {"len": 100}], "5": ["range(0, 100)", "range", {"len": 100}]}, "331": {"0": true, "1": true, "2": true, "3": true, "4": true, "5": true}, "235": {"0": ["[0, 1, 2, 3, 4, 5, ...]", "list", {"len": 100}, ["0", ["0", "int", {}]], ["1", ["1", "int", {}]], ["2", ["2", "int", {}]], ["97", ["97", "int", {}]], ["98", ["98", "int", {}]], ["99", ["99", "int", {}]]], "1": ["[1, 2, 3, 4, 5, 6, ...]", "list", {"len": 100}, ["0", ["1", "int", {}]], ["1", ["2", "int", {}]], ["2", ["3", "int", {}]], ["97", ["98", "int", {}]], ["98", ["99", "int", {}]], ["99", ["100", "int", {}]]], "2": ["[2, 3, 4, 5, 6, 7, ...]", "list", {"len": 100}, ["0", ["2", "int", {}]], ["1", ["3", "int", {}]], ["2", ["4", "int", {}]], ["97", ["99", "int", {}]], ["98", ["100", "int", {}]], ["99", ["101", "int", {}]]], "3": ["[97, 98, 99, 100, 101, 102, ...]", "list", {"len": 100}, ["0", ["97", "int", {}]], ["1", ["98", "int", {}]], ["2", ["99", "int", {}]], ["97", ["194", "int", {}]], ["98", ["195", "int", {}]], ["99", ["196", "int", {}]]], "4": ["[98, 99, 100, 101, 102, 103, ...]", "list", {"len": 100}, ["0", ["98", "int", {}]], ["1", ["99", "int", {}]], ["2", ["100", "int", {}]], ["97", ["195", "int", {}]], ["98", ["196", "int", {}]], ["99", ["197", "int", {}]]], "5": ["[99, 100, 101, 102, 103, 104, ...]", "list", {"len": 100}, ["0", ["99", "int", {}]], ["1", ["100", "int", {}]], ["2", ["101", "int", {}]], ["97", ["196", "int", {}]], ["98", ["197", "int", {}]], ["99", ["198", "int", {}]]]}, "418": {"0": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["97", "int", {}], "4": ["98", "int", {}], "5": ["99", "int", {}]}, "1": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["97", "int", {}], "4": ["98", "int", {}], "5": ["99", "int", {}]}, "2": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["97", "int", {}], "4": ["98", "int", {}], "5": ["99", "int", {}]}, "3": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["97", "int", {}], "4": ["98", "int", {}], "5": ["99", "int", {}]}, "4": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["97", "int", {}], "4": ["98", "int", {}], "5": ["99", "int", {}]}, "5": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["97", "int", {}], "4": ["98", "int", {}], "5": ["99", "int", {}]}}, "420": {"0": {"0": ["0", "int", {}], "1": ["0", "int", {}], "2": ["0", "int", {}], "3": ["0", "int", {}], "4": ["0", "int", {}], "5": ["0", "int", {}]}, "1": {"0": ["1", "int", {}], "1": ["1", "int", {}], "2": ["1", "int", {}], "3": ["1", "int", {}], "4": ["1", "int", {}], "5": ["1", "int", {}]}, "2": {"0": ["2", "int", {}], "1": ["2", "int", {}], "2": ["2", "int", {}], "3": ["2", "int", {}], "4": ["2", "int", {}], "5": ["2", "int", {}]}, "3": {"0": ["97", "int", {}], "1": ["97", "int", {}], "2": ["97", "int", {}], "3": ["97", "int", {}], "4": ["97", "int", {}], "5": ["97", "int", {}]}, "4": {"0": ["98", "int", {}], "1": ["98", "int", {}], "2": ["98", "int", {}], "3": ["98", "int", {}], "4": ["98", "int", {}], "5": ["98", "int", {}]}, "5": {"0": ["99", "int", {}], "1": ["99", "int", {}], "2": ["99", "int", {}], "3": ["99", "int", {}], "4": ["99", "int", {}], "5": ["99", "int", {}]}}, "330": {"0": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["97", "int", {}], "4": ["98", "int", {}], "5": ["99", "int", {}]}, "1": {"0": ["1", "int", {}], "1": ["2", "int", {}], "2": ["3", "int", {}], "3": ["98", "int", {}], "4": ["99", "int", {}], "5": ["100", "int", {}]}, "2": {"0": ["2", "int", {}], "1": ["3", "int", {}], "2": ["4", "int", {}], "3": ["99", "int", {}], "4": ["100", "int", {}], "5": ["101", "int", {}]}, "3": {"0": ["97", "int", {}], "1": ["98", "int", {}], "2": ["99", "int", {}], "3": ["194", "int", {}], "4": ["195", "int", {}], "5": ["196", "int", {}]}, "4": {"0": ["98", "int", {}], "1": ["99", "int", {}], "2": ["100", "int", {}], "3": ["195", "int", {}], "4": ["196", "int", {}], "5": ["197", "int", {}]}, "5": {"0": ["99", "int", {}], "1": ["100", "int", {}], "2": ["101", "int", {}], "3": ["196", "int", {}], "4": ["197", "int", {}], "5": ["198", "int", {}]}}, "338": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["3", "int", {}]}, "342": {"0": ["0", "int", {}]}, "341": {"0": ["0", "int", {}]}, "161": {"0": true}}, "loop_iterations": {"47": [{"index": 0, "loops": {}}, {"index": 1, "loops": {"127": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}]}}, {"index": 2, "loops": {"127": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 3, "loops": {}}]}}, {"index": 97, "loops": {"127": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 191, "loops": {}}, {"index": 192, "loops": {}}, {"index": 193, "loops": {}}]}}, {"index": 98, "loops": {"127": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 193, "loops": {}}, {"index": 194, "loops": {}}, {"index": 195, "loops": {}}]}}, {"index": 99, "loops": {"127": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 195, "loops": {}}, {"index": 196, "loops": {}}, {"index": 197, "loops": {}}]}}], "48": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 3, "loops": {}}], "236": [{"index": 0, "loops": {"331": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 1, "loops": {"331": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 2, "loops": {"331": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 97, "loops": {"331": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 98, "loops": {"331": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 99, "loops": {"331": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}], "339": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 3, "loops": {}}], "343": [{"index": 0, "loops": {}}], "67": [{"index": 0, "loops": {}}]}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "main", "html_body": "<span data-index=\"12\" data-type=\"stmt\">@<span data-index=\"75\" data-type=\"expr\">eye</span>\ndef main():\n    <span data-index=\"45\" data-type=\"stmt\">assert <span data-index=\"121\" data-type=\"expr\"><span data-index=\"209\" data-type=\"expr\"><span data-index=\"310\" data-type=\"expr\">factorial</span>(3)</span> == 6</span></span>\n\n    <span data-index=\"46\" data-type=\"stmt\">vals = []</span>\n<span data-index=\"47\" data-type=\"loop\">    for i in <span data-index=\"125\" data-type=\"expr\"><span data-index=\"215\" data-type=\"expr\">range</span>(100)</span>:\n        <span data-index=\"126\" data-type=\"stmt\"><span data-index=\"217\" data-type=\"expr\"><span data-index=\"313\" data-type=\"expr\"><span data-index=\"401\" data-type=\"expr\">vals</span>.append</span>([])</span></span>\n<span data-index=\"127\" data-type=\"loop\">        for j in <span data-index=\"219\" data-type=\"expr\"><span data-index=\"316\" data-type=\"expr\">range</span>(<span data-index=\"317\" data-type=\"expr\">2 * <span data-index=\"407\" data-type=\"expr\">i</span></span>)</span>:\n            <span data-index=\"220\" data-type=\"stmt\"><span data-index=\"318\" data-type=\"expr\"><span data-index=\"408\" data-type=\"expr\"><span data-index=\"474\" data-type=\"expr\"><span data-index=\"523\" data-type=\"expr\">vals</span>[-1]</span>.append</span>(<span data-index=\"409\" data-type=\"expr\"><span data-index=\"476\" data-type=\"expr\">i</span> + <span data-index=\"478\" data-type=\"expr\">j</span></span>)</span></span>\n            <span data-index=\"221\" data-type=\"stmt\"><span data-index=\"319\" data-type=\"expr\"><span data-index=\"410\" data-type=\"expr\">dummy</span>(<span data-index=\"411\" data-type=\"expr\">vals</span>)</span></span></span></span>\n\n<span data-index=\"48\" data-type=\"loop\">    for i in <span data-index=\"129\" data-type=\"expr\"><span data-index=\"223\" data-type=\"expr\">range</span>(6)</span>:\n<span data-index=\"130\" data-type=\"stmt\">        try:\n            <span data-index=\"225\" data-type=\"stmt\"><span data-index=\"321\" data-type=\"expr\"><span data-index=\"412\" data-type=\"expr\">dummy</span>(<span data-index=\"413\" data-type=\"expr\"><span data-index=\"482\" data-type=\"expr\">1 / (<span data-index=\"530\" data-type=\"expr\"><span data-index=\"542\" data-type=\"expr\">i</span> % 2</span>)</span> + 10</span>)</span></span>\n        except <span data-index=\"322\" data-type=\"expr\">ZeroDivisionError</span>:\n            <span data-index=\"323\" data-type=\"stmt\">continue</span></span>\n<span data-index=\"131\" data-type=\"stmt\">        if <span data-index=\"227\" data-type=\"expr\"><span data-index=\"324\" data-type=\"expr\">i</span> == 3</span>:\n            <span data-index=\"228\" data-type=\"stmt\">break</span></span></span>\n\n    <span data-index=\"49\" data-type=\"stmt\">c = <span data-index=\"133\" data-type=\"expr\"><span data-index=\"230\" data-type=\"expr\"><span data-index=\"327\" data-type=\"expr\">MyClass</span>()</span> + <span data-index=\"232\" data-type=\"expr\"><span data-index=\"328\" data-type=\"expr\">MyClass</span>()</span></span></span>\n    <span data-index=\"50\" data-type=\"stmt\"><span data-index=\"233\" data-type=\"expr\">c</span>.list = <span data-index=\"135\" data-type=\"expr\">[<span data-index=\"235\" data-type=\"expr\">[<span data-index=\"330\" data-type=\"expr\"><span data-index=\"418\" data-type=\"expr\">x</span> + <span data-index=\"420\" data-type=\"expr\">y</span></span> <span data-index=\"331\" data-type=\"loop\">for x in <span data-index=\"422\" data-type=\"expr\"><span data-index=\"488\" data-type=\"expr\">range</span>(100)</span></span>]</span> \n <span data-index=\"236\" data-type=\"loop\">for y in <span data-index=\"333\" data-type=\"expr\"><span data-index=\"424\" data-type=\"expr\">range</span>(100)</span></span>]</span></span>\n    <span data-index=\"51\" data-type=\"stmt\"><span data-index=\"136\" data-type=\"expr\"><span data-index=\"237\" data-type=\"expr\">dummy</span>(<span data-index=\"238\" data-type=\"expr\"><span data-index=\"335\" data-type=\"expr\">n</span> for n in <span data-index=\"428\" data-type=\"expr\"><span data-index=\"492\" data-type=\"expr\">range</span>(4)</span></span>)</span></span>\n    <span data-index=\"52\" data-type=\"stmt\"><span data-index=\"137\" data-type=\"expr\"><span data-index=\"239\" data-type=\"expr\">dummy</span>(<span data-index=\"240\" data-type=\"expr\">{<span data-index=\"338\" data-type=\"expr\">n</span> <span data-index=\"339\" data-type=\"loop\">for n in <span data-index=\"431\" data-type=\"expr\"><span data-index=\"495\" data-type=\"expr\">range</span>(4)</span></span>}</span>)</span></span>\n    <span data-index=\"53\" data-type=\"stmt\"><span data-index=\"138\" data-type=\"expr\"><span data-index=\"241\" data-type=\"expr\">dummy</span>(<span data-index=\"242\" data-type=\"expr\">{<span data-index=\"341\" data-type=\"expr\">n</span>: <span data-index=\"342\" data-type=\"expr\">n</span> <span data-index=\"343\" data-type=\"loop\">for n in <span data-index=\"435\" data-type=\"expr\"><span data-index=\"498\" data-type=\"expr\">range</span>(1)</span></span>}</span>)</span></span>\n<span data-index=\"54\" data-type=\"stmt\">    with <span data-index=\"243\" data-type=\"expr\">c</span>:\n        <span data-index=\"140\" data-type=\"stmt\">pass</span></span>\n    <span data-index=\"55\" data-type=\"stmt\"><span data-index=\"141\" data-type=\"expr\"><span data-index=\"244\" data-type=\"expr\">dummy</span>(<span data-index=\"245\" data-type=\"expr\"><span data-index=\"346\" data-type=\"expr\">c</span> + <span data-index=\"348\" data-type=\"expr\"><span data-index=\"437\" data-type=\"expr\">SlotClass</span>()</span></span>)</span></span>\n\n    <span data-index=\"56\" data-type=\"stmt\">assert <span data-index=\"142\" data-type=\"expr\"><span data-index=\"246\" data-type=\"expr\"><span data-index=\"349\" data-type=\"expr\">complex_args</span>(\n        <span data-index=\"350\" data-type=\"expr\"><span data-index=\"439\" data-type=\"expr\">list</span>(<span data-index=\"440\" data-type=\"expr\"><span data-index=\"502\" data-type=\"expr\">range</span>(1000)</span>)</span>,\n        &quot;hello&quot;,\n        key2=8,\n        kwarg1={&#x27;key&#x27;: &#x27;value&#x27;}\n    )</span> == <span data-index=\"248\" data-type=\"expr\">[<span data-index=\"354\" data-type=\"expr\"><span data-index=\"443\" data-type=\"expr\">list</span>(<span data-index=\"444\" data-type=\"expr\"><span data-index=\"507\" data-type=\"expr\">range</span>(1000)</span>)</span>,\n          &#x27;hello&#x27;,\n          <span data-index=\"356\" data-type=\"expr\"><span data-index=\"445\" data-type=\"expr\">dict</span>(kwarg1={&#x27;key&#x27;: &#x27;value&#x27;})</span>]</span></span></span>\n\n    <span data-index=\"57\" data-type=\"stmt\">assert <span data-index=\"143\" data-type=\"expr\"><span data-index=\"249\" data-type=\"expr\"><span data-index=\"358\" data-type=\"expr\">complex_args</span>(<span data-index=\"359\" data-type=\"expr\">*[1, 2]</span>, **{&#x27;k&#x27;: 23})</span> == [1, 2, {&#x27;k&#x27;: 23}]</span></span>\n\n    <span data-index=\"58\" data-type=\"stmt\">assert <span data-index=\"144\" data-type=\"expr\"><span data-index=\"252\" data-type=\"expr\"><span data-index=\"365\" data-type=\"expr\">eval</span>(<span data-index=\"366\" data-type=\"expr\">&#x27;%s + %s&#x27; % (1, 2)</span>)</span> == 3</span></span>\n\n    <span data-index=\"59\" data-type=\"stmt\">x = 1</span>\n    <span data-index=\"60\" data-type=\"stmt\">x += 5</span>\n    <span data-index=\"61\" data-type=\"stmt\">assert <span data-index=\"150\" data-type=\"expr\"><span data-index=\"257\" data-type=\"expr\">x</span> == 6</span></span>\n    <span data-index=\"62\" data-type=\"stmt\">del x</span>\n\n    <span data-index=\"63\" data-type=\"stmt\"><span data-index=\"152\" data-type=\"expr\"><span data-index=\"261\" data-type=\"expr\">dummy</span>(True, False, None)</span></span>\n\n    <span data-index=\"64\" data-type=\"stmt\">assert <span data-index=\"153\" data-type=\"expr\"><span data-index=\"265\" data-type=\"expr\">[1, 2, 3][1]</span> == 2</span></span>\n    <span data-index=\"65\" data-type=\"stmt\">assert <span data-index=\"154\" data-type=\"expr\"><span data-index=\"268\" data-type=\"expr\">(1, 2, 3)[:2]</span> == (1, 2)</span></span>\n\n<span data-index=\"66\" data-type=\"stmt\">    try:\n        <span data-index=\"155\" data-type=\"stmt\">raise <span data-index=\"271\" data-type=\"expr\"><span data-index=\"378\" data-type=\"expr\">ValueError</span>()</span></span>\n    except <span data-index=\"272\" data-type=\"expr\">AssertionError</span> as e:\n        <span data-index=\"273\" data-type=\"stmt\">pass</span>\n    except <span data-index=\"274\" data-type=\"expr\">TypeError</span>:\n        <span data-index=\"275\" data-type=\"stmt\">pass</span>\n    except:\n        <span data-index=\"276\" data-type=\"stmt\">pass</span>\n    finally:\n        <span data-index=\"159\" data-type=\"stmt\"><span data-index=\"277\" data-type=\"expr\"><span data-index=\"381\" data-type=\"expr\">dummy</span>()</span></span></span>\n\n<span data-index=\"67\" data-type=\"loop\">    while True:\n        <span data-index=\"161\" data-type=\"stmt\">break</span></span>\n\n    <span data-index=\"68\" data-type=\"stmt\">assert <span data-index=\"162\" data-type=\"expr\"><span data-index=\"278\" data-type=\"expr\">(<span data-index=\"382\" data-type=\"expr\">lambda x: <span data-index=\"470\" data-type=\"expr\"><span data-index=\"520\" data-type=\"expr\">x</span> * 2</span></span>)(4)</span> == 8</span></span>\n\n    <span data-index=\"69\" data-type=\"stmt\">global G</span>\n    <span data-index=\"70\" data-type=\"stmt\">G = 4</span>\n    <span data-index=\"71\" data-type=\"stmt\">assert <span data-index=\"165\" data-type=\"expr\"><span data-index=\"282\" data-type=\"expr\">G</span> == 4</span></span>\n\n    <span data-index=\"72\" data-type=\"stmt\">g = <span data-index=\"167\" data-type=\"expr\"><span data-index=\"286\" data-type=\"expr\">gen</span>()</span></span>\n    <span data-index=\"73\" data-type=\"stmt\"><span data-index=\"168\" data-type=\"expr\"><span data-index=\"287\" data-type=\"expr\">use_gen_1</span>(<span data-index=\"288\" data-type=\"expr\">g</span>)</span></span>\n    <span data-index=\"74\" data-type=\"stmt\"><span data-index=\"169\" data-type=\"expr\"><span data-index=\"289\" data-type=\"expr\">use_gen_2</span>(<span data-index=\"290\" data-type=\"expr\">g</span>)</span></span></span>", "lineno": 61, "data": {"node_loops": {"126": [47], "127": [47], "130": [48], "131": [48], "161": [67], "217": [47], "219": [47], "220": [47, 127], "221": [47, 127], "225": [48], "227": [48], "228": [48], "235": [236], "313": [47], "316": [47], "317": [47], "318": [47, 127], "319": [47, 127], "321": [48], "322": [48], "323": [48], "324": [48], "330": [236, 331], "331": [236], "335": [336], "338": [339], "341": [343], "342": [343], "401": [47], "407": [47], "408": [47, 127], "409": [47, 127], "410": [47, 127], "411": [47, 127], "412": [48], "413": [48], "418": [236, 331], "420": [236, 331], "422": [236], "474": [47, 127], "476": [47, 127], "478": [47, 127], "482": [48], "488": [236], "523": [47, 127], "530": [48], "542": [48]}}}}, {"arguments": [["n", "3"]], "return_value": "6", "exception": null, "traceback": null, "data": {"node_values": {"19": true, "172": ["3", "int", {}], "79": ["False", "bool", {}], "20": true, "176": ["3", "int", {}], "294": ["<function factorial at 0xABC>", "function", {}, ["__wrapped__", ["<function factorial at 0xABC>", "function", {}]]], "391": ["3", "int", {}], "295": ["2", "int", {}], "178": ["2", "int", {"inner_call": "test_id_3"}], "81": ["6", "int", {}]}, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "factorial", "html_body": "<span data-index=\"4\" data-type=\"stmt\">@<span data-index=\"21\" data-type=\"expr\">eye</span>\ndef factorial(n):\n<span data-index=\"19\" data-type=\"stmt\">    if <span data-index=\"79\" data-type=\"expr\"><span data-index=\"172\" data-type=\"expr\">n</span> &lt;= 1</span>:\n        <span data-index=\"80\" data-type=\"stmt\">return 1</span></span>\n    <span data-index=\"20\" data-type=\"stmt\">return <span data-index=\"81\" data-type=\"expr\"><span data-index=\"176\" data-type=\"expr\">n</span> * <span data-index=\"178\" data-type=\"expr\"><span data-index=\"294\" data-type=\"expr\">factorial</span>(<span data-index=\"295\" data-type=\"expr\"><span data-index=\"391\" data-type=\"expr\">n</span> - 1</span>)</span></span></span></span>\n", "lineno": 8, "data": {"node_loops": {}}}}, {"arguments": [["n", "2"]], "return_value": "2", "exception": null, "traceback": null, "data": {"node_values": {"19": true, "172": ["2", "int", {}], "79": ["False", "bool", {}], "20": true, "176": ["2", "int", {}], "294": ["<function factorial at 0xABC>", "function", {}, ["__wrapped__", ["<function factorial at 0xABC>", "function", {}]]], "391": ["2", "int", {}], "295": ["1", "int", {}], "178": ["1", "int", {"inner_call": "test_id_4"}], "81": ["2", "int", {}]}, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "factorial", "html_body": "<span data-index=\"4\" data-type=\"stmt\">@<span data-index=\"21\" data-type=\"expr\">eye</span>\ndef factorial(n):\n<span data-index=\"19\" data-type=\"stmt\">    if <span data-index=\"79\" data-type=\"expr\"><span data-index=\"172\" data-type=\"expr\">n</span> &lt;= 1</span>:\n        <span data-index=\"80\" data-type=\"stmt\">return 1</span></span>\n    <span data-index=\"20\" data-type=\"stmt\">return <span data-index=\"81\" data-type=\"expr\"><span data-index=\"176\" data-type=\"expr\">n</span> * <span data-index=\"178\" data-type=\"expr\"><span data-index=\"294\" data-type=\"expr\">factorial</span>(<span data-index=\"295\" data-type=\"expr\"><span data-index=\"391\" data-type=\"expr\">n</span> - 1</span>)</span></span></span></span>\n", "lineno": 8, "data": {"node_loops": {}}}}, {"arguments": [["n", "1"]], "return_value": "1", "exception": null, "traceback": null, "data": {"node_values": {"19": true, "172": ["1", "int", {}], "79": ["True", "bool", {}], "80": true}, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "factorial", "html_body": "<span data-index=\"4\" data-type=\"stmt\">@<span data-index=\"21\" data-type=\"expr\">eye</span>\ndef factorial(n):\n<span data-index=\"19\" data-type=\"stmt\">    if <span data-index=\"79\" data-type=\"expr\"><span data-index=\"172\" data-type=\"expr\">n</span> &lt;= 1</span>:\n        <span data-index=\"80\" data-type=\"stmt\">return 1</span></span>\n    <span data-index=\"20\" data-type=\"stmt\">return <span data-index=\"81\" data-type=\"expr\"><span data-index=\"176\" data-type=\"expr\">n</span> * <span data-index=\"178\" data-type=\"expr\"><span data-index=\"294\" data-type=\"expr\">factorial</span>(<span data-index=\"295\" data-type=\"expr\"><span data-index=\"391\" data-type=\"expr\">n</span> - 1</span>)</span></span></span></span>\n", "lineno": 8, "data": {"node_loops": {}}}}, {"arguments": [["self", "<tests.golden_script.MyClass object at 0xABC>"], ["other", "<tests.golden_script.MyClass object at 0xABC>"]], "return_value": "<tests.golden_script.MyClass object at 0xABC>", "exception": null, "traceback": null, "data": {"node_values": {"115": true, "203": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass", {}]}, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "MyClass.__add__", "html_body": "<span data-index=\"40\" data-type=\"stmt\">    def __add__(self, other):\n        <span data-index=\"115\" data-type=\"stmt\">return <span data-index=\"203\" data-type=\"expr\">other</span></span></span>\n", "lineno": 51, "data": {"node_loops": {}}}}, {"arguments": [["self", "<tests.golden_script.MyClass object at 0xABC>"]], "return_value": "None", "exception": null, "traceback": null, "data": {"node_values": {"117": true}, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "MyClass.__enter__", "html_body": "<span data-index=\"41\" data-type=\"stmt\">    def __enter__(self):\n        <span data-index=\"117\" data-type=\"stmt\">pass</span></span>\n", "lineno": 54, "data": {"node_loops": {}}}}, {"arguments": [["self", "<tests.golden_script.MyClass object at 0xABC>"], ["exc_type", "None"], ["exc_val", "None"], ["exc_tb", "None"]], "return_value": "None", "exception": null, "traceback": null, "data": {"node_values": {"119": true}, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "MyClass.__exit__", "html_body": "<span data-index=\"42\" data-type=\"stmt\">    def __exit__(self, exc_type, exc_val, exc_tb):\n        <span data-index=\"119\" data-type=\"stmt\">pass</span></span>\n", "lineno": 57, "data": {"node_loops": {}}}}, {"arguments": [["self", "<tests.golden_script.MyClass object at 0xABC>"], ["other", "<tests.golden_script.SlotClass object at 0xABC>"]], "return_value": "<tests.golden_script.SlotClass object at 0xABC>", "exception": null, "traceback": null, "data": {"node_values": {"115": true, "203": ["<tests.golden_script.SlotClass object at 0xABC>", "SlotClass", {}, ["slot1", ["3", "int", {}]]]}, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "MyClass.__add__", "html_body": "<span data-index=\"40\" data-type=\"stmt\">    def __add__(self, other):\n        <span data-index=\"115\" data-type=\"stmt\">return <span data-index=\"203\" data-type=\"expr\">other</span></span></span>\n", "lineno": 51, "data": {"node_loops": {}}}}, {"arguments": [["pos1", "[0, 1, 2, 3, 4, 5, ...]"], ["pos2", "'hello'"], ["key1", "3"], ["key2", "8"], ["args", "()"], ["kwargs", "{'kwarg1': {'key': 'value'}}"]], "return_value": "[[0, 1, 2, 3, 4, 5, ...], 'hello', {'kwarg1': {'key': 'value'}}]", "exception": null, "traceback": null, "data": {"node_values": {"28": true, "185": ["[0, 1, 2, 3, 4, 5, ...]", "list", {"len": 1000}, ["0", ["0", "int", {}]], ["1", ["1", "int", {}]], ["2", ["2", "int", {}]], ["997", ["997", "int", {}]], ["998", ["998", "int", {}]], ["999", ["999", "int", {}]]], "186": ["'hello'", "str", {"len": 5}], "187": ["{'kwarg1': {'key': 'value'}}", "dict", {"len": 1}, ["'kwarg1'", ["{'key': 'value'}", "dict", {"len": 1}, ["'key'", ["'value'", "str", {"len": 5}]]]]], "97": ["[[0, 1, 2, 3, 4, 5, ...], 'hello', {'kwarg1': {'key': 'value'}}]", "list", {"len": 3}, ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", {"len": 1000}, ["0", ["0", "int", {}]], ["1", ["1", "int", {}]], ["2", ["2", "int", {}]], ["997", ["997", "int", {}]], ["998", ["998", "int", {}]], ["999", ["999", "int", {}]]]], ["1", ["'hello'", "str", {"len": 5}]], ["2", ["{'kwarg1': {'key': 'value'}}", "dict", {"len": 1}, ["'kwarg1'", ["{'key': 'value'}", "dict", {"len": 1}, ["'key'", ["'value'", "str", {"len": 5}]]]]]]]}, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "complex_args", "html_body": "<span data-index=\"7\" data-type=\"stmt\">@<span data-index=\"29\" data-type=\"expr\">eye</span>\ndef complex_args(pos1, pos2, key1=3, key2=4, *args, **kwargs):\n    <span data-index=\"28\" data-type=\"stmt\">return <span data-index=\"97\" data-type=\"expr\">[<span data-index=\"185\" data-type=\"expr\">pos1</span>, <span data-index=\"186\" data-type=\"expr\">pos2</span>, <span data-index=\"187\" data-type=\"expr\">kwargs</span>]</span></span></span>\n", "lineno": 26, "data": {"node_loops": {}}}}, {"arguments": [["pos1", "1"], ["pos2", "2"], ["key1", "3"], ["key2", "4"], ["args", "()"], ["kwargs", "{'k': 23}"]], "return_value": "[1, 2, {'k': 23}]", "exception": null, "traceback": null, "data": {"node_values": {"28": true, "185": ["1", "int", {}], "186": ["2", "int", {}], "187": ["{'k': 23}", "dict", {"len": 1}, ["'k'", ["23", "int", {}]]], "97": ["[1, 2, {'k': 23}]", "list", {"len": 3}, ["0", ["1", "int", {}]], ["1", ["2", "int", {}]], ["2", ["{'k': 23}", "dict", {"len": 1}, ["'k'", ["23", "int", {}]]]]]}, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "complex_args", "html_body": "<span data-index=\"7\" data-type=\"stmt\">@<span data-index=\"29\" data-type=\"expr\">eye</span>\ndef complex_args(pos1, pos2, key1=3, key2=4, *args, **kwargs):\n    <span data-index=\"28\" data-type=\"stmt\">return <span data-index=\"97\" data-type=\"expr\">[<span data-index=\"185\" data-type=\"expr\">pos1</span>, <span data-index=\"186\" data-type=\"expr\">pos2</span>, <span data-index=\"187\" data-type=\"expr\">kwargs</span>]</span></span></span>\n", "lineno": 26, "data": {"node_loops": {}}}}, {"arguments": [["g", "<generator object gen at 0xABC>"]], "return_value": "None", "exception": null, "traceback": null, "data": {"node_values": {"34": true, "194": ["<class 'itertools.islice'>", "type", {}, ["__doc__", ["'islice(iterab...s an iterator.'", "str", {"len": 454}]], ["__getattribute__", ["<slot wrapper '__getattribut...f 'itertools.islice' objects>", "wrapper_descriptor", {}]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.islice' objects>", "wrapper_descriptor", {}]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method", {}]], ["__next__", ["<slot wrapper '__next__' of 'itertools.islice' objects>", "wrapper_descriptor", {}]], ["__reduce__", ["<method '__reduce__' of 'itertools.islice' objects>", "method_descriptor", {}]], ["__setstate__", ["<method '__setstate__' of 'itertools.islice' objects>", "method_descriptor", {}]]], "195": ["<generator object gen at 0xABC>", "generator", {}], "105": ["<itertools.islice object at 0xABC>", "islice", {}], "106": {"0": true, "1": true, "2": true}, "305": {"0": ["<function dummy at 0xABC>", "function", {}], "1": ["<function dummy at 0xABC>", "function", {}], "2": ["<function dummy at 0xABC>", "function", {}]}, "306": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}]}, "197": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}], "2": ["None", "NoneType", {}]}}, "loop_iterations": {"34": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}]}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "use_gen_1", "html_body": "<span data-index=\"9\" data-type=\"stmt\">@<span data-index=\"35\" data-type=\"expr\">eye</span>\ndef use_gen_1(g):\n<span data-index=\"34\" data-type=\"loop\">    for x in <span data-index=\"105\" data-type=\"expr\"><span data-index=\"194\" data-type=\"expr\">islice</span>(<span data-index=\"195\" data-type=\"expr\">g</span>, 3)</span>:\n        <span data-index=\"106\" data-type=\"stmt\"><span data-index=\"197\" data-type=\"expr\"><span data-index=\"305\" data-type=\"expr\">dummy</span>(<span data-index=\"306\" data-type=\"expr\">x</span>)</span></span></span></span>\n", "lineno": 37, "data": {"node_loops": {"106": [34], "197": [34], "305": [34], "306": [34]}}}}, {"arguments": [], "return_value": "None", "exception": null, "traceback": null, "data": {"node_values": {"31": true, "100": ["range(0, 6)", "range", {"len": 6}], "101": {"0": true, "1": true, "2": true, "3": true, "4": true, "5": true}, "302": {"0": ["0", "int", {}], "1": ["1", "int", {}], "2": ["2", "int", {}], "3": ["3", "int", {}], "4": ["4", "int", {}], "5": ["5", "int", {}]}, "192": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}], "2": ["None", "NoneType", {}], "3": ["None", "NoneType", {}], "4": ["None", "NoneType", {}], "5": ["None", "NoneType", {}]}}, "loop_iterations": {"31": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 3, "loops": {}}, {"index": 4, "loops": {}}, {"index": 5, "loops": {}}]}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "gen", "html_body": "<span data-index=\"8\" data-type=\"stmt\">@<span data-index=\"32\" data-type=\"expr\">eye</span>\ndef gen():\n<span data-index=\"31\" data-type=\"loop\">    for i in <span data-index=\"100\" data-type=\"expr\"><span data-index=\"190\" data-type=\"expr\">range</span>(6)</span>:\n        <span data-index=\"101\" data-type=\"stmt\"><span data-index=\"192\" data-type=\"expr\">yield <span data-index=\"302\" data-type=\"expr\">i</span></span></span></span></span>\n", "lineno": 31, "data": {"node_loops": {"101": [31], "192": [31], "302": [31]}}}}, {"arguments": [["g", "<generator object gen at 0xABC>"]], "return_value": "None", "exception": null, "traceback": null, "data": {"node_values": {"37": true, "110": ["<generator object gen at 0xABC>", "generator", {}], "111": {"0": true, "1": true, "2": true}, "307": {"0": ["<function dummy at 0xABC>", "function", {}], "1": ["<function dummy at 0xABC>", "function", {}], "2": ["<function dummy at 0xABC>", "function", {}]}, "308": {"0": ["3", "int", {}], "1": ["4", "int", {}], "2": ["5", "int", {}]}, "200": {"0": ["None", "NoneType", {}], "1": ["None", "NoneType", {}], "2": ["None", "NoneType", {}]}}, "loop_iterations": {"37": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}]}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "member_descriptor", "method_descriptor", "range", "set", "str", "tuple", "type", "wrapper_descriptor"], "num_special_types": 11}, "function": {"name": "use_gen_2", "html_body": "<span data-index=\"10\" data-type=\"stmt\">@<span data-index=\"38\" data-type=\"expr\">eye</span>\ndef use_gen_2(g):\n<span data-index=\"37\" data-type=\"loop\">    for y in <span data-index=\"110\" data-type=\"expr\">g</span>:\n        <span data-index=\"111\" data-type=\"stmt\"><span data-index=\"200\" data-type=\"expr\"><span data-index=\"307\" data-type=\"expr\">dummy</span>(<span data-index=\"308\" data-type=\"expr\">y</span>)</span></span></span></span>\n", "lineno": 43, "data": {"node_loops": {"111": [37], "200": [37], "307": [37], "308": [37]}}}}]