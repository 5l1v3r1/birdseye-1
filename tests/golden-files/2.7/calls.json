[{"exception": null, "data": {"num_special_types": 13, "loop_iterations": {"237": [{"index": 0, "loops": {"340": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 1, "loops": {"340": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 2, "loops": {"340": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 97, "loops": {"340": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 98, "loops": {"340": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}, {"index": 99, "loops": {"340": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 97, "loops": {}}, {"index": 98, "loops": {}}, {"index": 99, "loops": {}}]}}], "348": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 3, "loops": {}}], "48": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 3, "loops": {}}], "352": [{"index": 0, "loops": {}}], "67": [{"index": 0, "loops": {}}], "47": [{"index": 0, "loops": {}}, {"index": 1, "loops": {"124": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}]}}, {"index": 2, "loops": {"124": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 3, "loops": {}}]}}, {"index": 97, "loops": {"124": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 191, "loops": {}}, {"index": 192, "loops": {}}, {"index": 193, "loops": {}}]}}, {"index": 98, "loops": {"124": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 193, "loops": {}}, {"index": 194, "loops": {}}, {"index": 195, "loops": {}}]}}, {"index": 99, "loops": {"124": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 195, "loops": {}}, {"index": 196, "loops": {}}, {"index": 197, "loops": {}}]}}]}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"282": ["4", "int"], "286": ["<function gen at 0xABC>", "function"], "287": ["<function use_gen_1 at 0xABC>", "function"], "288": ["<generator object gen at 0xABC>", "generator"], "289": ["<function use_gen_2 at 0xABC>", "function"], "49": true, "48": true, "45": true, "47": true, "46": true, "278": ["8", "int"], "276": ["None", "NoneType"], "272": true, "395": true, "396": ["<function dummy at 0xABC>", "function"], "397": ["<function <lambda> at 0xABC>", "function"], "250": ["[1, 2, {'k': 23}]", "list", {"inner_call": "test_id_10"}, "len() = 3", ["0", ["1", "int"]], ["1", ["2", "int"]], ["2", ["{'k': 23}", "dict", "len() = 1", ["'k'", ["23", "int"]]]]], "434": {"2": {"2": ["2", "int"], "3": ["97", "int"], "0": ["0", "int"], "1": ["1", "int"], "4": ["98", "int"], "5": ["99", "int"]}, "3": {"2": ["2", "int"], "3": ["97", "int"], "0": ["0", "int"], "1": ["1", "int"], "4": ["98", "int"], "5": ["99", "int"]}, "0": {"2": ["2", "int"], "3": ["97", "int"], "0": ["0", "int"], "1": ["1", "int"], "4": ["98", "int"], "5": ["99", "int"]}, "1": {"2": ["2", "int"], "3": ["97", "int"], "0": ["0", "int"], "1": ["1", "int"], "4": ["98", "int"], "5": ["99", "int"]}, "4": {"2": ["2", "int"], "3": ["97", "int"], "0": ["0", "int"], "1": ["1", "int"], "4": ["98", "int"], "5": ["99", "int"]}, "5": {"2": ["2", "int"], "3": ["97", "int"], "0": ["0", "int"], "1": ["1", "int"], "4": ["98", "int"], "5": ["99", "int"]}}, "436": {"2": {"2": ["2", "int"], "3": ["2", "int"], "0": ["2", "int"], "1": ["2", "int"], "4": ["2", "int"], "5": ["2", "int"]}, "3": {"2": ["97", "int"], "3": ["97", "int"], "0": ["97", "int"], "1": ["97", "int"], "4": ["97", "int"], "5": ["97", "int"]}, "0": {"2": ["0", "int"], "3": ["0", "int"], "0": ["0", "int"], "1": ["0", "int"], "4": ["0", "int"], "5": ["0", "int"]}, "1": {"2": ["1", "int"], "3": ["1", "int"], "0": ["1", "int"], "1": ["1", "int"], "4": ["1", "int"], "5": ["1", "int"]}, "4": {"2": ["98", "int"], "3": ["98", "int"], "0": ["98", "int"], "1": ["98", "int"], "4": ["98", "int"], "5": ["98", "int"]}, "5": {"2": ["99", "int"], "3": ["99", "int"], "0": ["99", "int"], "1": ["99", "int"], "4": ["99", "int"], "5": ["99", "int"]}}, "438": {"2": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]], "3": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]], "0": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]], "1": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]], "4": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]], "5": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]]}, "56": true, "57": true, "54": true, "55": true, "52": true, "53": true, "50": true, "51": true, "447": ["[0, 1, 2, 3]", "list", "len() = 4", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["3", ["3", "int"]]], "58": true, "59": true, "328": {"2": {"2": ["None", "NoneType"], "3": ["None", "NoneType"], "0": ["None", "NoneType"], "1": ["None", "NoneType"]}, "3": {"2": ["None", "NoneType"], "3": ["None", "NoneType"], "0": ["None", "NoneType"], "1": ["None", "NoneType"], "4": ["None", "NoneType"], "5": ["None", "NoneType"]}, "1": {"0": ["None", "NoneType"], "1": ["None", "NoneType"]}, "4": {"2": ["None", "NoneType"], "3": ["None", "NoneType"], "0": ["None", "NoneType"], "1": ["None", "NoneType"], "4": ["None", "NoneType"], "5": ["None", "NoneType"]}, "5": {"2": ["None", "NoneType"], "3": ["None", "NoneType"], "0": ["None", "NoneType"], "1": ["None", "NoneType"], "4": ["None", "NoneType"], "5": ["None", "NoneType"]}}, "560": {"2": ["2", "int"], "3": ["3", "int"], "0": ["0", "int"], "1": ["1", "int"]}, "322": {"2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "4": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "5": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"]}, "327": {"2": {"2": ["None", "NoneType"], "3": ["None", "NoneType"], "0": ["None", "NoneType"], "1": ["None", "NoneType"]}, "3": {"2": ["None", "NoneType"], "3": ["None", "NoneType"], "0": ["None", "NoneType"], "1": ["None", "NoneType"], "4": ["None", "NoneType"], "5": ["None", "NoneType"]}, "1": {"0": ["None", "NoneType"], "1": ["None", "NoneType"]}, "4": {"2": ["None", "NoneType"], "3": ["None", "NoneType"], "0": ["None", "NoneType"], "1": ["None", "NoneType"], "4": ["None", "NoneType"], "5": ["None", "NoneType"]}, "5": {"2": ["None", "NoneType"], "3": ["None", "NoneType"], "0": ["None", "NoneType"], "1": ["None", "NoneType"], "4": ["None", "NoneType"], "5": ["None", "NoneType"]}}, "326": {"2": ["4", "int"], "3": ["194", "int"], "0": ["0", "int"], "1": ["2", "int"], "4": ["196", "int"], "5": ["198", "int"]}, "262": ["<function dummy at 0xABC>", "function"], "266": ["2", "int"], "269": ["(1, 2)", "tuple", "len() = 2", ["0", ["1", "int"]], ["1", ["2", "int"]]], "118": ["True", "bool"], "253": ["3", "int"], "460": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 1000", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["997", ["997", "int"]], ["998", ["998", "int"]], ["999", ["999", "int"]]], "69": true, "68": true, "67": true, "66": true, "65": true, "64": true, "63": true, "62": true, "61": true, "60": true, "218": {"2": ["None", "NoneType"], "3": ["None", "NoneType"], "0": ["None", "NoneType"], "1": ["None", "NoneType"], "4": ["None", "NoneType"], "5": ["None", "NoneType"]}, "128": {"3": true, "1": true}, "497": {"2": {"2": ["2", "int"], "3": ["2", "int"], "0": ["2", "int"], "1": ["2", "int"]}, "3": {"2": ["97", "int"], "3": ["97", "int"], "0": ["97", "int"], "1": ["97", "int"], "4": ["97", "int"], "5": ["97", "int"]}, "1": {"0": ["1", "int"], "1": ["1", "int"]}, "4": {"2": ["98", "int"], "3": ["98", "int"], "0": ["98", "int"], "1": ["98", "int"], "4": ["98", "int"], "5": ["98", "int"]}, "5": {"2": ["99", "int"], "3": ["99", "int"], "0": ["99", "int"], "1": ["99", "int"], "4": ["99", "int"], "5": ["99", "int"]}}, "495": {"2": {"2": ["[2, 3]", "list", "len() = 2", ["0", ["2", "int"]], ["1", ["3", "int"]]], "3": ["[2, 3, 4]", "list", "len() = 3", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]]], "0": ["[]", "list", "len() = 0"], "1": ["[2]", "list", "len() = 1", ["0", ["2", "int"]]]}, "3": {"2": ["[97, 98]", "list", "len() = 2", ["0", ["97", "int"]], ["1", ["98", "int"]]], "3": ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 191", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["188", ["285", "int"]], ["189", ["286", "int"]], ["190", ["287", "int"]]], "0": ["[]", "list", "len() = 0"], "1": ["[97]", "list", "len() = 1", ["0", ["97", "int"]]], "4": ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 192", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["189", ["286", "int"]], ["190", ["287", "int"]], ["191", ["288", "int"]]], "5": ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 193", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["190", ["287", "int"]], ["191", ["288", "int"]], ["192", ["289", "int"]]]}, "1": {"0": ["[]", "list", "len() = 0"], "1": ["[1]", "list", "len() = 1", ["0", ["1", "int"]]]}, "4": {"2": ["[98, 99]", "list", "len() = 2", ["0", ["98", "int"]], ["1", ["99", "int"]]], "3": ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 193", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["190", ["288", "int"]], ["191", ["289", "int"]], ["192", ["290", "int"]]], "0": ["[]", "list", "len() = 0"], "1": ["[98]", "list", "len() = 1", ["0", ["98", "int"]]], "4": ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 194", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["191", ["289", "int"]], ["192", ["290", "int"]], ["193", ["291", "int"]]], "5": ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 195", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["192", ["290", "int"]], ["193", ["291", "int"]], ["194", ["292", "int"]]]}, "5": {"2": ["[99, 100]", "list", "len() = 2", ["0", ["99", "int"]], ["1", ["100", "int"]]], "3": ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 195", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["192", ["291", "int"]], ["193", ["292", "int"]], ["194", ["293", "int"]]], "0": ["[]", "list", "len() = 0"], "1": ["[99]", "list", "len() = 1", ["0", ["99", "int"]]], "4": ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 196", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["193", ["292", "int"]], ["194", ["293", "int"]], ["195", ["294", "int"]]], "5": ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 197", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["194", ["293", "int"]], ["195", ["294", "int"]], ["196", ["295", "int"]]]}}, "123": {"2": true, "3": true, "0": true, "1": true, "4": true, "5": true}, "122": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]], "499": {"2": {"2": ["2", "int"], "3": ["3", "int"], "0": ["0", "int"], "1": ["1", "int"]}, "3": {"2": ["2", "int"], "3": ["191", "int"], "0": ["0", "int"], "1": ["1", "int"], "4": ["192", "int"], "5": ["193", "int"]}, "1": {"0": ["0", "int"], "1": ["1", "int"]}, "4": {"2": ["2", "int"], "3": ["193", "int"], "0": ["0", "int"], "1": ["1", "int"], "4": ["194", "int"], "5": ["195", "int"]}, "5": {"2": ["2", "int"], "3": ["195", "int"], "0": ["0", "int"], "1": ["1", "int"], "4": ["196", "int"], "5": ["197", "int"]}}, "127": {"2": true, "3": true, "0": true, "1": true}, "126": ["[0, 1, 2, 3, 4, 5]", "list", "len() = 6", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["3", ["3", "int"]], ["4", ["4", "int"]], ["5", ["5", "int"]]], "124": {"2": true, "3": true, "0": true, "1": true, "4": true, "5": true}, "374": ["'1 + 2'", "str", "len() = 5"], "417": {"2": ["[[], [1, 2]]", "list", "len() = 2", ["0", ["[]", "list", "len() = 0"]], ["1", ["[1, 2]", "list", "len() = 2", ["0", ["1", "int"]], ["1", ["2", "int"]]]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 97", ["0", ["[]", "list", "len() = 0"]], ["1", ["[1, 2]", "list", "len() = 2", ["0", ["1", "int"]], ["1", ["2", "int"]]]], ["2", ["[2, 3, 4, 5]", "list", "len() = 4", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["3", ["5", "int"]]]], ["94", ["[94, 95, 96, 97, 98, 99, ...]", "list", "len() = 188", ["0", ["94", "int"]], ["1", ["95", "int"]], ["2", ["96", "int"]], ["185", ["279", "int"]], ["186", ["280", "int"]], ["187", ["281", "int"]]]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", "len() = 190", ["0", ["95", "int"]], ["1", ["96", "int"]], ["2", ["97", "int"]], ["187", ["282", "int"]], ["188", ["283", "int"]], ["189", ["284", "int"]]]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", "len() = 192", ["0", ["96", "int"]], ["1", ["97", "int"]], ["2", ["98", "int"]], ["189", ["285", "int"]], ["190", ["286", "int"]], ["191", ["287", "int"]]]]], "0": ["[]", "list", "len() = 0"], "1": ["[[]]", "list", "len() = 1", ["0", ["[]", "list", "len() = 0"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list", "len() = 0"]], ["1", ["[1, 2]", "list", "len() = 2", ["0", ["1", "int"]], ["1", ["2", "int"]]]], ["2", ["[2, 3, 4, 5]", "list", "len() = 4", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["3", ["5", "int"]]]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list", "len() = 190", ["0", ["95", "int"]], ["1", ["96", "int"]], ["2", ["97", "int"]], ["187", ["282", "int"]], ["188", ["283", "int"]], ["189", ["284", "int"]]]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", "len() = 192", ["0", ["96", "int"]], ["1", ["97", "int"]], ["2", ["98", "int"]], ["189", ["285", "int"]], ["190", ["286", "int"]], ["191", ["287", "int"]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 194", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["191", ["288", "int"]], ["192", ["289", "int"]], ["193", ["290", "int"]]]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list", "len() = 0"]], ["1", ["[1, 2]", "list", "len() = 2", ["0", ["1", "int"]], ["1", ["2", "int"]]]], ["2", ["[2, 3, 4, 5]", "list", "len() = 4", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["3", ["5", "int"]]]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list", "len() = 192", ["0", ["96", "int"]], ["1", ["97", "int"]], ["2", ["98", "int"]], ["189", ["285", "int"]], ["190", ["286", "int"]], ["191", ["287", "int"]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 194", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["191", ["288", "int"]], ["192", ["289", "int"]], ["193", ["290", "int"]]]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 196", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["193", ["291", "int"]], ["194", ["292", "int"]], ["195", ["293", "int"]]]]]}, "290": ["<generator object gen at 0xABC>", "generator"], "362": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 1000", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["997", ["997", "int"]], ["998", ["998", "int"]], ["999", ["999", "int"]]], "74": true, "70": true, "71": true, "72": true, "73": true, "138": ["None", "NoneType"], "139": ["True", "bool"], "134": ["None", "NoneType"], "135": ["None", "NoneType"], "136": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass", ["list", ["[[0, 1, 2, 3, 4, 5, ...], [1, 2, 3, 4, 5, 6, ...], [2, 3, 4, 5, 6, 7, ...], [3, 4, 5, 6, 7, 8, ...], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]]], ["1", ["[1, 2, 3, 4, 5, 6, ...]", "list", "len() = 100", ["0", ["1", "int"]], ["1", ["2", "int"]], ["2", ["3", "int"]], ["97", ["98", "int"]], ["98", ["99", "int"]], ["99", ["100", "int"]]]], ["2", ["[2, 3, 4, 5, 6, 7, ...]", "list", "len() = 100", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["97", ["99", "int"]], ["98", ["100", "int"]], ["99", ["101", "int"]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 100", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["97", ["194", "int"]], ["98", ["195", "int"]], ["99", ["196", "int"]]]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 100", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["97", ["195", "int"]], ["98", ["196", "int"]], ["99", ["197", "int"]]]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 100", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["97", ["196", "int"]], ["98", ["197", "int"]], ["99", ["198", "int"]]]]]]], "137": true, "130": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass", {"inner_call": "test_id_5"}], "132": ["[[0, 1, 2, 3, 4, 5, ...], [1, 2, 3, 4, 5, 6, ...], [2, 3, 4, 5, 6, 7, ...], [3, 4, 5, 6, 7, 8, ...], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]]], ["1", ["[1, 2, 3, 4, 5, 6, ...]", "list", "len() = 100", ["0", ["1", "int"]], ["1", ["2", "int"]], ["2", ["3", "int"]], ["97", ["98", "int"]], ["98", ["99", "int"]], ["99", ["100", "int"]]]], ["2", ["[2, 3, 4, 5, 6, 7, ...]", "list", "len() = 100", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["97", ["99", "int"]], ["98", ["100", "int"]], ["99", ["101", "int"]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 100", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["97", ["194", "int"]], ["98", ["195", "int"]], ["99", ["196", "int"]]]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 100", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["97", ["195", "int"]], ["98", ["196", "int"]], ["99", ["197", "int"]]]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 100", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["97", ["196", "int"]], ["98", ["197", "int"]], ["99", ["198", "int"]]]]], "133": ["None", "NoneType"], "389": ["ValueError()", "ValueError"], "503": {"2": ["ZeroDivisionError: division by zero\n", -1], "3": ["1.0", "float"], "0": ["ZeroDivisionError: division by zero\n", -1], "1": ["1.0", "float"]}, "444": ["[0, 1, 2, 3]", "list", "len() = 4", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["3", ["3", "int"]]], "319": ["<function factorial at 0xABC>", "function"], "233": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass"], "231": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass"], "237": true, "236": {"2": ["[2, 3, 4, 5, 6, 7, ...]", "list", "len() = 100", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["97", ["99", "int"]], ["98", ["100", "int"]], ["99", ["101", "int"]]], "3": ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 100", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["97", ["194", "int"]], ["98", ["195", "int"]], ["99", ["196", "int"]]], "0": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]], "1": ["[1, 2, 3, 4, 5, 6, ...]", "list", "len() = 100", ["0", ["1", "int"]], ["1", ["2", "int"]], ["2", ["3", "int"]], ["97", ["98", "int"]], ["98", ["99", "int"]], ["99", ["100", "int"]]], "4": ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 100", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["97", ["195", "int"]], ["98", ["196", "int"]], ["99", ["197", "int"]]], "5": ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 100", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["97", ["196", "int"]], ["98", ["197", "int"]], ["99", ["198", "int"]]]}, "234": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass"], "239": ["<generator object <genexpr> at 0xABC>", "generator"], "238": ["<function dummy at 0xABC>", "function"], "350": {"0": ["0", "int"]}, "351": {"0": ["0", "int"]}, "352": true, "149": ["None", "NoneType"], "356": ["<tests.golden_script.SlotClass object at 0xABC>", "SlotClass", ["slot1", ["3", "int"]]], "357": ["<function complex_args at 0xABC>", "function"], "358": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 1000", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["997", ["997", "int"]], ["998", ["998", "int"]], ["999", ["999", "int"]]], "354": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass", ["list", ["[[0, 1, 2, 3, 4, 5, ...], [1, 2, 3, 4, 5, 6, ...], [2, 3, 4, 5, 6, 7, ...], [3, 4, 5, 6, 7, 8, ...], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]]], ["1", ["[1, 2, 3, 4, 5, 6, ...]", "list", "len() = 100", ["0", ["1", "int"]], ["1", ["2", "int"]], ["2", ["3", "int"]], ["97", ["98", "int"]], ["98", ["99", "int"]], ["99", ["100", "int"]]]], ["2", ["[2, 3, 4, 5, 6, 7, ...]", "list", "len() = 100", ["0", ["2", "int"]], ["1", ["3", "int"]], ["2", ["4", "int"]], ["97", ["99", "int"]], ["98", ["100", "int"]], ["99", ["101", "int"]]]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list", "len() = 100", ["0", ["97", "int"]], ["1", ["98", "int"]], ["2", ["99", "int"]], ["97", ["194", "int"]], ["98", ["195", "int"]], ["99", ["196", "int"]]]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list", "len() = 100", ["0", ["98", "int"]], ["1", ["99", "int"]], ["2", ["100", "int"]], ["97", ["195", "int"]], ["98", ["196", "int"]], ["99", ["197", "int"]]]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list", "len() = 100", ["0", ["99", "int"]], ["1", ["100", "int"]], ["2", ["101", "int"]], ["97", ["196", "int"]], ["98", ["197", "int"]], ["99", ["198", "int"]]]]]]], "147": ["True", "bool"], "141": ["True", "bool"], "140": ["True", "bool"], "226": {"2": true, "3": true, "0": true, "1": true}, "220": {"2": ["[0, 1, 2, 3]", "list", "len() = 4", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["3", ["3", "int"]]], "3": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 194", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["191", ["191", "int"]], ["192", ["192", "int"]], ["193", ["193", "int"]]], "0": ["[]", "list", "len() = 0"], "1": ["[0, 1]", "list", "len() = 2", ["0", ["0", "int"]], ["1", ["1", "int"]]], "4": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 196", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["193", ["193", "int"]], ["194", ["194", "int"]], ["195", ["195", "int"]]], "5": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 198", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["195", ["195", "int"]], ["196", ["196", "int"]], ["197", ["197", "int"]]]}, "221": {"2": {"2": true, "3": true, "0": true, "1": true}, "3": {"2": true, "3": true, "0": true, "1": true, "4": true, "5": true}, "1": {"0": true, "1": true}, "4": {"2": true, "3": true, "0": true, "1": true, "4": true, "5": true}, "5": {"2": true, "3": true, "0": true, "1": true, "4": true, "5": true}}, "222": {"2": {"2": true, "3": true, "0": true, "1": true}, "3": {"2": true, "3": true, "0": true, "1": true, "4": true, "5": true}, "1": {"0": true, "1": true}, "4": {"2": true, "3": true, "0": true, "1": true, "4": true, "5": true}, "5": {"2": true, "3": true, "0": true, "1": true, "4": true, "5": true}}, "228": {"3": ["True", "bool"], "1": ["False", "bool"]}, "229": {"3": true}, "364": ["{'kwarg1': {'key': 'value'}}", "dict", "len() = 1", ["'kwarg1'", ["{'key': 'value'}", "dict", "len() = 1", ["'key'", ["'value'", "str", "len() = 5"]]]]], "366": ["<function complex_args at 0xABC>", "function"], "159": ["True", "bool"], "156": ["True", "bool"], "155": {"0": true}, "152": true, "153": true, "150": ["True", "bool"], "151": ["True", "bool"], "423": {"2": ["2", "int"], "3": ["97", "int"], "0": ["0", "int"], "1": ["1", "int"], "4": ["98", "int"], "5": ["99", "int"]}, "426": {"2": {"2": ["<function dummy at 0xABC>", "function"], "3": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "1": ["<function dummy at 0xABC>", "function"]}, "3": {"2": ["<function dummy at 0xABC>", "function"], "3": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "1": ["<function dummy at 0xABC>", "function"], "4": ["<function dummy at 0xABC>", "function"], "5": ["<function dummy at 0xABC>", "function"]}, "1": {"0": ["<function dummy at 0xABC>", "function"], "1": ["<function dummy at 0xABC>", "function"]}, "4": {"2": ["<function dummy at 0xABC>", "function"], "3": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "1": ["<function dummy at 0xABC>", "function"], "4": ["<function dummy at 0xABC>", "function"], "5": ["<function dummy at 0xABC>", "function"]}, "5": {"2": ["<function dummy at 0xABC>", "function"], "3": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "1": ["<function dummy at 0xABC>", "function"], "4": ["<function dummy at 0xABC>", "function"], "5": ["<function dummy at 0xABC>", "function"]}}, "427": {"2": {"2": ["[[], [1, 2], [2, 3, 4]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]]], "0": ["[[], [1, 2], [2]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2]", "list"]]], "1": ["[[], [1, 2], [2, 3]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3]", "list"]]]}, "3": {"2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]]], "0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97]", "list"]]], "1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98]", "list"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]]]}, "1": {"0": ["[[], [1]]", "list", "len() = 2", ["0", ["[]", "list"]], ["1", ["[1]", "list"]]], "1": ["[[], [1, 2]]", "list", "len() = 2", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]]]}, "4": {"2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]]], "0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98]", "list"]]], "1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99]", "list"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]]]}, "5": {"2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list"]]], "0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99]", "list"]]], "1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100]", "list"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list"]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list"]]]}}, "424": {"2": {"2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"]}, "3": {"2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "4": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "5": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"]}, "1": {"0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"]}, "4": {"2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "4": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "5": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"]}, "5": {"2": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "3": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "0": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "1": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "4": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"], "5": ["<built-in method append of list object at 0xABC>", "builtin_function_or_method"]}}, "425": {"2": {"2": ["4", "int"], "3": ["5", "int"], "0": ["2", "int"], "1": ["3", "int"]}, "3": {"2": ["99", "int"], "3": ["288", "int"], "0": ["97", "int"], "1": ["98", "int"], "4": ["289", "int"], "5": ["290", "int"]}, "1": {"0": ["1", "int"], "1": ["2", "int"]}, "4": {"2": ["100", "int"], "3": ["291", "int"], "0": ["98", "int"], "1": ["99", "int"], "4": ["292", "int"], "5": ["293", "int"]}, "5": {"2": ["101", "int"], "3": ["294", "int"], "0": ["99", "int"], "1": ["100", "int"], "4": ["295", "int"], "5": ["296", "int"]}}, "428": {"2": ["<function dummy at 0xABC>", "function"], "3": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "1": ["<function dummy at 0xABC>", "function"]}, "429": {"3": ["11.0", "float"], "1": ["11.0", "float"]}, "339": {"2": {"2": ["4", "int"], "3": ["99", "int"], "0": ["2", "int"], "1": ["3", "int"], "4": ["100", "int"], "5": ["101", "int"]}, "3": {"2": ["99", "int"], "3": ["194", "int"], "0": ["97", "int"], "1": ["98", "int"], "4": ["195", "int"], "5": ["196", "int"]}, "0": {"2": ["2", "int"], "3": ["97", "int"], "0": ["0", "int"], "1": ["1", "int"], "4": ["98", "int"], "5": ["99", "int"]}, "1": {"2": ["3", "int"], "3": ["98", "int"], "0": ["1", "int"], "1": ["2", "int"], "4": ["99", "int"], "5": ["100", "int"]}, "4": {"2": ["100", "int"], "3": ["195", "int"], "0": ["98", "int"], "1": ["99", "int"], "4": ["196", "int"], "5": ["197", "int"]}, "5": {"2": ["101", "int"], "3": ["196", "int"], "0": ["99", "int"], "1": ["100", "int"], "4": ["197", "int"], "5": ["198", "int"]}}, "332": {"2": true, "0": true}, "333": {"3": ["3", "int"], "1": ["1", "int"]}, "330": {"3": ["None", "NoneType"], "1": ["None", "NoneType"]}, "336": ["<class 'tests.golden_script.MyClass'>", "type", ["__add__", ["<function __add__ at 0xABC>", "function"]], ["__dict__", ["<attribute '__dict__' of 'MyClass' objects>", "getset_descriptor"]], ["__doc__", ["None", "NoneType"]], ["__enter__", ["<function __enter__ at 0xABC>", "function"]], ["__exit__", ["<function __exit__ at 0xABC>", "function"]], ["__module__", ["'tests.golden_script'", "str", "len() = 19"]], ["__weakref__", ["<attribute '__weakref__' of 'MyClass' objects>", "getset_descriptor"]]], "337": ["<class 'tests.golden_script.MyClass'>", "type", ["__add__", ["<function __add__ at 0xABC>", "function"]], ["__dict__", ["<attribute '__dict__' of 'MyClass' objects>", "getset_descriptor"]], ["__doc__", ["None", "NoneType"]], ["__enter__", ["<function __enter__ at 0xABC>", "function"]], ["__exit__", ["<function __exit__ at 0xABC>", "function"]], ["__module__", ["'tests.golden_script'", "str", "len() = 19"]], ["__weakref__", ["<attribute '__weakref__' of 'MyClass' objects>", "getset_descriptor"]]], "163": ["None", "NoneType", {"inner_call": "test_id_13"}], "162": ["None", "NoneType", {"inner_call": "test_id_11"}], "161": ["<generator object gen at 0xABC>", "generator"], "210": ["6", "int", {"inner_call": "test_id_2"}], "258": ["6", "int"], "456": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 1000", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["997", ["997", "int"]], ["998", ["998", "int"]], ["999", ["999", "int"]]], "453": ["<class 'tests.golden_script.SlotClass'>", "type", ["__doc__", ["None", "NoneType"]], ["__init__", ["<function __init__ at 0xABC>", "function"]], ["__module__", ["'tests.golden_script'", "str", "len() = 19"]], ["__slots__", ["('slot1',)", "tuple", "len() = 1", ["0", ["'slot1'", "str", "len() = 5"]]]], ["slot1", ["<member 'slot1' of 'SlotClass' objects>", "member_descriptor"]]], "451": ["[0]", "list", "len() = 1", ["0", ["0", "int"]]], "348": true, "347": {"2": ["2", "int"], "3": ["3", "int"], "0": ["0", "int"], "1": ["1", "int"]}, "540": {"2": {"2": ["[[], [1, 2], [2, 3]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4]", "list"]]], "0": ["[[], [1, 2], []]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[]", "list"]]], "1": ["[[], [1, 2], [2]]", "list", "len() = 3", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2]", "list"]]]}, "3": {"2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]]], "0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[]", "list"]]], "1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97]", "list"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 98", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["95", ["[95, 96, 97, 98, 99, 100, ...]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]]]}, "1": {"0": ["[[], []]", "list", "len() = 2", ["0", ["[]", "list"]], ["1", ["[]", "list"]]], "1": ["[[], [1]]", "list", "len() = 2", ["0", ["[]", "list"]], ["1", ["[1]", "list"]]]}, "4": {"2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]]], "0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[]", "list"]]], "1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98]", "list"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 99", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["96", ["[96, 97, 98, 99, 100, 101, ...]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]]]}, "5": {"2": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100]", "list"]]], "3": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list"]]], "0": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[]", "list"]]], "1": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99]", "list"]]], "4": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list"]]], "5": ["[[], [1, 2], [2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, ...], [5, 6, 7, 8, 9, 10, ...], ...]", "list", "len() = 100", ["0", ["[]", "list"]], ["1", ["[1, 2]", "list"]], ["2", ["[2, 3, 4, 5]", "list"]], ["97", ["[97, 98, 99, 100, 101, 102, ...]", "list"]], ["98", ["[98, 99, 100, 101, 102, 103, ...]", "list"]], ["99", ["[99, 100, 101, 102, 103, 104, ...]", "list"]]]}}, "342": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 100", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["97", ["97", "int"]], ["98", ["98", "int"]], ["99", ["99", "int"]]], "547": {"2": ["0", "int"], "3": ["1", "int"], "0": ["0", "int"], "1": ["1", "int"]}, "340": {"2": true, "3": true, "0": true, "1": true, "4": true, "5": true}, "246": ["<tests.golden_script.SlotClass object at 0xABC>", "SlotClass", {"inner_call": "test_id_8"}, ["slot1", ["3", "int"]]], "247": ["[[0, 1, 2, 3, 4, 5, ...], 'hello', {'kwarg1': {'key': 'value'}}]", "list", {"inner_call": "test_id_9"}, "len() = 3", ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 1000", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["997", ["997", "int"]], ["998", ["998", "int"]], ["999", ["999", "int"]]]], ["1", ["'hello'", "str", "len() = 5"]], ["2", ["{'kwarg1': {'key': 'value'}}", "dict", "len() = 1", ["'kwarg1'", ["{'key': 'value'}", "dict", "len() = 1", ["'key'", ["'value'", "str"]]]]]]], "245": ["<function dummy at 0xABC>", "function"], "242": ["<function dummy at 0xABC>", "function"], "243": ["{0: 0}", "dict", "len() = 1", ["0", ["0", "int"]]], "240": ["<function dummy at 0xABC>", "function"], "241": ["set([0, 1, 2, 3])", "set", "len() = 4", ["<0>", ["0", "int"]], ["<1>", ["1", "int"]], ["<2>", ["2", "int"]], ["<3>", ["3", "int"]]], "249": ["[[0, 1, 2, 3, 4, 5, ...], 'hello', {'kwarg1': {'key': 'value'}}]", "list", "len() = 3", ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 1000", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["997", ["997", "int"]], ["998", ["998", "int"]], ["999", ["999", "int"]]]], ["1", ["'hello'", "str", "len() = 5"]], ["2", ["{'kwarg1': {'key': 'value'}}", "dict", "len() = 1", ["'kwarg1'", ["{'key': 'value'}", "dict", "len() = 1", ["'key'", ["'value'", "str"]]]]]]]}}, "arguments": [], "return_value": "None", "traceback": null, "function": {"lineno": 61, "data": {"node_loops": {"423": [47], "344": [345], "426": [47, 124], "427": [47, 124], "424": [47, 124], "425": [47, 124], "228": [48], "428": [48], "429": [48], "547": [48], "340": [237], "218": [47], "128": [48], "497": [47, 124], "236": [237], "495": [47, 124], "123": [47], "333": [48], "330": [48], "331": [48], "127": [48], "124": [47], "350": [352], "351": [352], "417": [47], "434": [237, 340], "436": [237, 340], "438": [237], "339": [237, 340], "328": [47, 124], "226": [48], "560": [48], "220": [47], "221": [47, 124], "222": [47, 124], "347": [348], "540": [47, 124], "322": [47], "325": [47], "229": [48], "327": [47, 124], "326": [47], "332": [48], "503": [48], "155": [67], "509": [237], "499": [47, 124]}}, "html_body": "<span data-index=\"12\" data-type=\"stmt\">@<span data-index=\"75\" data-type=\"expr\">eye</span>\ndef main():\n    <span data-index=\"45\" data-type=\"stmt\">assert <span data-index=\"118\" data-type=\"expr\"><span data-index=\"210\" data-type=\"expr\"><span data-index=\"319\" data-type=\"expr\">factorial</span>(3)</span> == 6</span></span>\n\n    <span data-index=\"46\" data-type=\"stmt\">vals = []</span>\n<span data-index=\"47\" data-type=\"loop\">    for i in <span data-index=\"122\" data-type=\"expr\"><span data-index=\"216\" data-type=\"expr\">range</span>(100)</span>:\n        <span data-index=\"123\" data-type=\"stmt\"><span data-index=\"218\" data-type=\"expr\"><span data-index=\"322\" data-type=\"expr\"><span data-index=\"417\" data-type=\"expr\">vals</span>.append</span>([])</span></span>\n<span data-index=\"124\" data-type=\"loop\">        for j in <span data-index=\"220\" data-type=\"expr\"><span data-index=\"325\" data-type=\"expr\">range</span>(<span data-index=\"326\" data-type=\"expr\">2 * <span data-index=\"423\" data-type=\"expr\">i</span></span>)</span>:\n            <span data-index=\"221\" data-type=\"stmt\"><span data-index=\"327\" data-type=\"expr\"><span data-index=\"424\" data-type=\"expr\"><span data-index=\"495\" data-type=\"expr\"><span data-index=\"540\" data-type=\"expr\">vals</span>[-1]</span>.append</span>(<span data-index=\"425\" data-type=\"expr\"><span data-index=\"497\" data-type=\"expr\">i</span> + <span data-index=\"499\" data-type=\"expr\">j</span></span>)</span></span>\n            <span data-index=\"222\" data-type=\"stmt\"><span data-index=\"328\" data-type=\"expr\"><span data-index=\"426\" data-type=\"expr\">dummy</span>(<span data-index=\"427\" data-type=\"expr\">vals</span>)</span></span></span></span>\n\n<span data-index=\"48\" data-type=\"loop\">    for i in <span data-index=\"126\" data-type=\"expr\"><span data-index=\"224\" data-type=\"expr\">range</span>(6)</span>:\n<span data-index=\"127\" data-type=\"stmt\">        try:\n            <span data-index=\"226\" data-type=\"stmt\"><span data-index=\"330\" data-type=\"expr\"><span data-index=\"428\" data-type=\"expr\">dummy</span>(<span data-index=\"429\" data-type=\"expr\"><span data-index=\"503\" data-type=\"expr\">1 / (<span data-index=\"547\" data-type=\"expr\"><span data-index=\"560\" data-type=\"expr\">i</span> % 2</span>)</span> + 10</span>)</span></span>\n        except <span data-index=\"331\" data-type=\"expr\">ZeroDivisionError</span>:\n            <span data-index=\"332\" data-type=\"stmt\">continue</span></span>\n<span data-index=\"128\" data-type=\"stmt\">        if <span data-index=\"228\" data-type=\"expr\"><span data-index=\"333\" data-type=\"expr\">i</span> == 3</span>:\n            <span data-index=\"229\" data-type=\"stmt\">break</span></span></span>\n\n    <span data-index=\"49\" data-type=\"stmt\">c = <span data-index=\"130\" data-type=\"expr\"><span data-index=\"231\" data-type=\"expr\"><span data-index=\"336\" data-type=\"expr\">MyClass</span>()</span> + <span data-index=\"233\" data-type=\"expr\"><span data-index=\"337\" data-type=\"expr\">MyClass</span>()</span></span></span>\n    <span data-index=\"50\" data-type=\"stmt\"><span data-index=\"234\" data-type=\"expr\">c</span>.list = <span data-index=\"132\" data-type=\"expr\">[<span data-index=\"236\" data-type=\"expr\">[<span data-index=\"339\" data-type=\"expr\"><span data-index=\"434\" data-type=\"expr\">x</span> + <span data-index=\"436\" data-type=\"expr\">y</span></span> <span data-index=\"340\" data-type=\"loop\">for x in <span data-index=\"438\" data-type=\"expr\"><span data-index=\"509\" data-type=\"expr\">range</span>(100)</span></span>]</span> \n <span data-index=\"237\" data-type=\"loop\">for y in <span data-index=\"342\" data-type=\"expr\"><span data-index=\"440\" data-type=\"expr\">range</span>(100)</span></span>]</span></span>\n    <span data-index=\"51\" data-type=\"stmt\"><span data-index=\"133\" data-type=\"expr\"><span data-index=\"238\" data-type=\"expr\">dummy</span>(<span data-index=\"239\" data-type=\"expr\"><span data-index=\"344\" data-type=\"expr\">n</span> for n in <span data-index=\"444\" data-type=\"expr\"><span data-index=\"513\" data-type=\"expr\">range</span>(4)</span></span>)</span></span>\n    <span data-index=\"52\" data-type=\"stmt\"><span data-index=\"134\" data-type=\"expr\"><span data-index=\"240\" data-type=\"expr\">dummy</span>(<span data-index=\"241\" data-type=\"expr\">{<span data-index=\"347\" data-type=\"expr\">n</span> <span data-index=\"348\" data-type=\"loop\">for n in <span data-index=\"447\" data-type=\"expr\"><span data-index=\"516\" data-type=\"expr\">range</span>(4)</span></span>}</span>)</span></span>\n    <span data-index=\"53\" data-type=\"stmt\"><span data-index=\"135\" data-type=\"expr\"><span data-index=\"242\" data-type=\"expr\">dummy</span>(<span data-index=\"243\" data-type=\"expr\">{<span data-index=\"350\" data-type=\"expr\">n</span>: <span data-index=\"351\" data-type=\"expr\">n</span> <span data-index=\"352\" data-type=\"loop\">for n in <span data-index=\"451\" data-type=\"expr\"><span data-index=\"519\" data-type=\"expr\">range</span>(1)</span></span>}</span>)</span></span>\n<span data-index=\"54\" data-type=\"stmt\">    with <span data-index=\"136\" data-type=\"expr\">c</span>:\n        <span data-index=\"137\" data-type=\"stmt\">pass</span></span>\n    <span data-index=\"55\" data-type=\"stmt\"><span data-index=\"138\" data-type=\"expr\"><span data-index=\"245\" data-type=\"expr\">dummy</span>(<span data-index=\"246\" data-type=\"expr\"><span data-index=\"354\" data-type=\"expr\">c</span> + <span data-index=\"356\" data-type=\"expr\"><span data-index=\"453\" data-type=\"expr\">SlotClass</span>()</span></span>)</span></span>\n\n    <span data-index=\"56\" data-type=\"stmt\">assert <span data-index=\"139\" data-type=\"expr\"><span data-index=\"247\" data-type=\"expr\"><span data-index=\"357\" data-type=\"expr\">complex_args</span>(\n        <span data-index=\"358\" data-type=\"expr\"><span data-index=\"455\" data-type=\"expr\">list</span>(<span data-index=\"456\" data-type=\"expr\"><span data-index=\"523\" data-type=\"expr\">range</span>(1000)</span>)</span>,\n        &quot;hello&quot;,\n        key2=8,\n        kwarg1={&#x27;key&#x27;: &#x27;value&#x27;}\n    )</span> == <span data-index=\"249\" data-type=\"expr\">[<span data-index=\"362\" data-type=\"expr\"><span data-index=\"459\" data-type=\"expr\">list</span>(<span data-index=\"460\" data-type=\"expr\"><span data-index=\"528\" data-type=\"expr\">range</span>(1000)</span>)</span>,\n          &#x27;hello&#x27;,\n          <span data-index=\"364\" data-type=\"expr\"><span data-index=\"461\" data-type=\"expr\">dict</span>(kwarg1={&#x27;key&#x27;: &#x27;value&#x27;})</span>]</span></span></span>\n\n    <span data-index=\"57\" data-type=\"stmt\">assert <span data-index=\"140\" data-type=\"expr\"><span data-index=\"250\" data-type=\"expr\"><span data-index=\"366\" data-type=\"expr\">complex_args</span>(*[1, 2], **{&#x27;k&#x27;: 23})</span> == [1, 2, {&#x27;k&#x27;: 23}]</span></span>\n\n    <span data-index=\"58\" data-type=\"stmt\">assert <span data-index=\"141\" data-type=\"expr\"><span data-index=\"253\" data-type=\"expr\"><span data-index=\"373\" data-type=\"expr\">eval</span>(<span data-index=\"374\" data-type=\"expr\">&#x27;%s + %s&#x27; % (1, 2)</span>)</span> == 3</span></span>\n\n    <span data-index=\"59\" data-type=\"stmt\">x = 1</span>\n    <span data-index=\"60\" data-type=\"stmt\">x += 5</span>\n    <span data-index=\"61\" data-type=\"stmt\">assert <span data-index=\"147\" data-type=\"expr\"><span data-index=\"258\" data-type=\"expr\">x</span> == 6</span></span>\n    <span data-index=\"62\" data-type=\"stmt\">del x</span>\n\n    <span data-index=\"63\" data-type=\"stmt\"><span data-index=\"149\" data-type=\"expr\"><span data-index=\"262\" data-type=\"expr\">dummy</span>(<span data-index=\"263\" data-type=\"expr\">True</span>, <span data-index=\"264\" data-type=\"expr\">False</span>, <span data-index=\"265\" data-type=\"expr\">None</span>)</span></span>\n\n    <span data-index=\"64\" data-type=\"stmt\">assert <span data-index=\"150\" data-type=\"expr\"><span data-index=\"266\" data-type=\"expr\">[1, 2, 3][1]</span> == 2</span></span>\n    <span data-index=\"65\" data-type=\"stmt\">assert <span data-index=\"151\" data-type=\"expr\"><span data-index=\"269\" data-type=\"expr\">(1, 2, 3)[:2]</span> == (1, 2)</span></span>\n\n<span data-index=\"66\" data-type=\"stmt\"><span data-index=\"152\" data-type=\"stmt\">    try:\n        <span data-index=\"272\" data-type=\"stmt\">raise <span data-index=\"389\" data-type=\"expr\"><span data-index=\"485\" data-type=\"expr\">ValueError</span>()</span></span>\n    except <span data-index=\"390\" data-type=\"expr\">AssertionError</span> as e:\n        <span data-index=\"392\" data-type=\"stmt\">pass</span>\n    except <span data-index=\"393\" data-type=\"expr\">TypeError</span>:\n        <span data-index=\"394\" data-type=\"stmt\">pass</span>\n    except:\n        <span data-index=\"395\" data-type=\"stmt\">pass</span></span>\n    finally:\n        <span data-index=\"153\" data-type=\"stmt\"><span data-index=\"276\" data-type=\"expr\"><span data-index=\"396\" data-type=\"expr\">dummy</span>()</span></span></span>\n\n<span data-index=\"67\" data-type=\"loop\">    while <span data-index=\"154\" data-type=\"expr\">True</span>:\n        <span data-index=\"155\" data-type=\"stmt\">break</span></span>\n\n    <span data-index=\"68\" data-type=\"stmt\">assert <span data-index=\"156\" data-type=\"expr\"><span data-index=\"278\" data-type=\"expr\">(<span data-index=\"397\" data-type=\"expr\">lambda <span data-index=\"536\" data-type=\"expr\">x</span>: <span data-index=\"491\" data-type=\"expr\"><span data-index=\"537\" data-type=\"expr\">x</span> * 2</span></span>)(4)</span> == 8</span></span>\n\n    <span data-index=\"69\" data-type=\"stmt\">global G</span>\n    <span data-index=\"70\" data-type=\"stmt\">G = 4</span>\n    <span data-index=\"71\" data-type=\"stmt\">assert <span data-index=\"159\" data-type=\"expr\"><span data-index=\"282\" data-type=\"expr\">G</span> == 4</span></span>\n\n    <span data-index=\"72\" data-type=\"stmt\">g = <span data-index=\"161\" data-type=\"expr\"><span data-index=\"286\" data-type=\"expr\">gen</span>()</span></span>\n    <span data-index=\"73\" data-type=\"stmt\"><span data-index=\"162\" data-type=\"expr\"><span data-index=\"287\" data-type=\"expr\">use_gen_1</span>(<span data-index=\"288\" data-type=\"expr\">g</span>)</span></span>\n    <span data-index=\"74\" data-type=\"stmt\"><span data-index=\"163\" data-type=\"expr\"><span data-index=\"289\" data-type=\"expr\">use_gen_2</span>(<span data-index=\"290\" data-type=\"expr\">g</span>)</span></span></span>", "name": "main"}}, {"exception": null, "data": {"num_special_types": 13, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"19": true, "295": ["2", "int"], "294": ["<function factorial at 0xABC>", "function"], "167": ["3", "int"], "20": true, "81": ["6", "int"], "79": ["False", "bool"], "171": ["3", "int"], "406": ["3", "int"], "173": ["2", "int", {"inner_call": "test_id_3"}]}}, "arguments": [["n", "3"]], "return_value": "6", "traceback": null, "function": {"lineno": 8, "data": {"node_loops": {}}, "html_body": "<span data-index=\"4\" data-type=\"stmt\">@<span data-index=\"21\" data-type=\"expr\">eye</span>\ndef factorial(<span data-index=\"78\" data-type=\"expr\">n</span>):\n<span data-index=\"19\" data-type=\"stmt\">    if <span data-index=\"79\" data-type=\"expr\"><span data-index=\"167\" data-type=\"expr\">n</span> &lt;= 1</span>:\n        <span data-index=\"80\" data-type=\"stmt\">return 1</span></span>\n    <span data-index=\"20\" data-type=\"stmt\">return <span data-index=\"81\" data-type=\"expr\"><span data-index=\"171\" data-type=\"expr\">n</span> * <span data-index=\"173\" data-type=\"expr\"><span data-index=\"294\" data-type=\"expr\">factorial</span>(<span data-index=\"295\" data-type=\"expr\"><span data-index=\"406\" data-type=\"expr\">n</span> - 1</span>)</span></span></span></span>\n", "name": "factorial"}}, {"exception": null, "data": {"num_special_types": 13, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"19": true, "295": ["1", "int"], "294": ["<function factorial at 0xABC>", "function"], "167": ["2", "int"], "20": true, "81": ["2", "int"], "79": ["False", "bool"], "171": ["2", "int"], "406": ["2", "int"], "173": ["1", "int", {"inner_call": "test_id_4"}]}}, "arguments": [["n", "2"]], "return_value": "2", "traceback": null, "function": {"lineno": 8, "data": {"node_loops": {}}, "html_body": "<span data-index=\"4\" data-type=\"stmt\">@<span data-index=\"21\" data-type=\"expr\">eye</span>\ndef factorial(<span data-index=\"78\" data-type=\"expr\">n</span>):\n<span data-index=\"19\" data-type=\"stmt\">    if <span data-index=\"79\" data-type=\"expr\"><span data-index=\"167\" data-type=\"expr\">n</span> &lt;= 1</span>:\n        <span data-index=\"80\" data-type=\"stmt\">return 1</span></span>\n    <span data-index=\"20\" data-type=\"stmt\">return <span data-index=\"81\" data-type=\"expr\"><span data-index=\"171\" data-type=\"expr\">n</span> * <span data-index=\"173\" data-type=\"expr\"><span data-index=\"294\" data-type=\"expr\">factorial</span>(<span data-index=\"295\" data-type=\"expr\"><span data-index=\"406\" data-type=\"expr\">n</span> - 1</span>)</span></span></span></span>\n", "name": "factorial"}}, {"exception": null, "data": {"num_special_types": 13, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"167": ["1", "int"], "19": true, "80": true, "79": ["True", "bool"]}}, "arguments": [["n", "1"]], "return_value": "1", "traceback": null, "function": {"lineno": 8, "data": {"node_loops": {}}, "html_body": "<span data-index=\"4\" data-type=\"stmt\">@<span data-index=\"21\" data-type=\"expr\">eye</span>\ndef factorial(<span data-index=\"78\" data-type=\"expr\">n</span>):\n<span data-index=\"19\" data-type=\"stmt\">    if <span data-index=\"79\" data-type=\"expr\"><span data-index=\"167\" data-type=\"expr\">n</span> &lt;= 1</span>:\n        <span data-index=\"80\" data-type=\"stmt\">return 1</span></span>\n    <span data-index=\"20\" data-type=\"stmt\">return <span data-index=\"81\" data-type=\"expr\"><span data-index=\"171\" data-type=\"expr\">n</span> * <span data-index=\"173\" data-type=\"expr\"><span data-index=\"294\" data-type=\"expr\">factorial</span>(<span data-index=\"295\" data-type=\"expr\"><span data-index=\"406\" data-type=\"expr\">n</span> - 1</span>)</span></span></span></span>\n", "name": "factorial"}}, {"exception": null, "data": {"num_special_types": 13, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"112": true, "204": ["<tests.golden_script.MyClass object at 0xABC>", "MyClass"]}}, "arguments": [["self", "<tests.golden_script.MyClass object at 0xABC>"], ["other", "<tests.golden_script.MyClass object at 0xABC>"]], "return_value": "<tests.golden_script.MyClass object at 0xABC>", "traceback": null, "function": {"lineno": 51, "data": {"node_loops": {}}, "html_body": "<span data-index=\"40\" data-type=\"stmt\">    def __add__(<span data-index=\"202\" data-type=\"expr\">self</span>, <span data-index=\"203\" data-type=\"expr\">other</span>):\n        <span data-index=\"112\" data-type=\"stmt\">return <span data-index=\"204\" data-type=\"expr\">other</span></span></span>\n", "name": "MyClass.__add__"}}, {"exception": null, "data": {"num_special_types": 13, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"114": true}}, "arguments": [["self", "<tests.golden_script.MyClass object at 0xABC>"]], "return_value": "None", "traceback": null, "function": {"lineno": 54, "data": {"node_loops": {}}, "html_body": "<span data-index=\"41\" data-type=\"stmt\">    def __enter__(<span data-index=\"205\" data-type=\"expr\">self</span>):\n        <span data-index=\"114\" data-type=\"stmt\">pass</span></span>\n", "name": "MyClass.__enter__"}}, {"exception": null, "data": {"num_special_types": 13, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"116": true}}, "arguments": [["self", "<tests.golden_script.MyClass object at 0xABC>"], ["exc_type", "None"], ["exc_val", "None"], ["exc_tb", "None"]], "return_value": "None", "traceback": null, "function": {"lineno": 57, "data": {"node_loops": {}}, "html_body": "<span data-index=\"42\" data-type=\"stmt\">    def __exit__(<span data-index=\"206\" data-type=\"expr\">self</span>, <span data-index=\"207\" data-type=\"expr\">exc_type</span>, <span data-index=\"208\" data-type=\"expr\">exc_val</span>, <span data-index=\"209\" data-type=\"expr\">exc_tb</span>):\n        <span data-index=\"116\" data-type=\"stmt\">pass</span></span>\n", "name": "MyClass.__exit__"}}, {"exception": null, "data": {"num_special_types": 13, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"112": true, "204": ["<tests.golden_script.SlotClass object at 0xABC>", "SlotClass", ["slot1", ["3", "int"]]]}}, "arguments": [["self", "<tests.golden_script.MyClass object at 0xABC>"], ["other", "<tests.golden_script.SlotClass object at 0xABC>"]], "return_value": "<tests.golden_script.SlotClass object at 0xABC>", "traceback": null, "function": {"lineno": 51, "data": {"node_loops": {}}, "html_body": "<span data-index=\"40\" data-type=\"stmt\">    def __add__(<span data-index=\"202\" data-type=\"expr\">self</span>, <span data-index=\"203\" data-type=\"expr\">other</span>):\n        <span data-index=\"112\" data-type=\"stmt\">return <span data-index=\"204\" data-type=\"expr\">other</span></span></span>\n", "name": "MyClass.__add__"}}, {"exception": null, "data": {"num_special_types": 13, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"28": true, "185": ["'hello'", "str", "len() = 5"], "184": ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 1000", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["997", ["997", "int"]], ["998", ["998", "int"]], ["999", ["999", "int"]]], "94": ["[[0, 1, 2, 3, 4, 5, ...], 'hello', {'kwarg1': {'key': 'value'}}]", "list", "len() = 3", ["0", ["[0, 1, 2, 3, 4, 5, ...]", "list", "len() = 1000", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["997", ["997", "int"]], ["998", ["998", "int"]], ["999", ["999", "int"]]]], ["1", ["'hello'", "str", "len() = 5"]], ["2", ["{'kwarg1': {'key': 'value'}}", "dict", "len() = 1", ["'kwarg1'", ["{'key': 'value'}", "dict", "len() = 1", ["'key'", ["'value'", "str"]]]]]]], "186": ["{'kwarg1': {'key': 'value'}}", "dict", "len() = 1", ["'kwarg1'", ["{'key': 'value'}", "dict", "len() = 1", ["'key'", ["'value'", "str", "len() = 5"]]]]]}}, "arguments": [["pos1", "[0, 1, 2, 3, 4, 5, ...]"], ["pos2", "'hello'"], ["key1", "3"], ["key2", "8"], ["args", "()"], ["kwargs", "{'kwarg1': {'key': 'value'}}"]], "return_value": "[[0, 1, 2, 3, 4, 5, ...], 'hello', {'kwarg1': {'key': 'value'}}]", "traceback": null, "function": {"lineno": 26, "data": {"node_loops": {}}, "html_body": "<span data-index=\"7\" data-type=\"stmt\">@<span data-index=\"29\" data-type=\"expr\">eye</span>\ndef complex_args(<span data-index=\"88\" data-type=\"expr\">pos1</span>, <span data-index=\"89\" data-type=\"expr\">pos2</span>, <span data-index=\"90\" data-type=\"expr\">key1</span>=3, <span data-index=\"91\" data-type=\"expr\">key2</span>=4, *args, **kwargs):\n    <span data-index=\"28\" data-type=\"stmt\">return <span data-index=\"94\" data-type=\"expr\">[<span data-index=\"184\" data-type=\"expr\">pos1</span>, <span data-index=\"185\" data-type=\"expr\">pos2</span>, <span data-index=\"186\" data-type=\"expr\">kwargs</span>]</span></span></span>\n", "name": "complex_args"}}, {"exception": null, "data": {"num_special_types": 13, "loop_iterations": {}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"28": true, "185": ["2", "int"], "184": ["1", "int"], "94": ["[1, 2, {'k': 23}]", "list", "len() = 3", ["0", ["1", "int"]], ["1", ["2", "int"]], ["2", ["{'k': 23}", "dict", "len() = 1", ["'k'", ["23", "int"]]]]], "186": ["{'k': 23}", "dict", "len() = 1", ["'k'", ["23", "int"]]]}}, "arguments": [["pos1", "1"], ["pos2", "2"], ["key1", "3"], ["key2", "4"], ["args", "()"], ["kwargs", "{'k': 23}"]], "return_value": "[1, 2, {'k': 23}]", "traceback": null, "function": {"lineno": 26, "data": {"node_loops": {}}, "html_body": "<span data-index=\"7\" data-type=\"stmt\">@<span data-index=\"29\" data-type=\"expr\">eye</span>\ndef complex_args(<span data-index=\"88\" data-type=\"expr\">pos1</span>, <span data-index=\"89\" data-type=\"expr\">pos2</span>, <span data-index=\"90\" data-type=\"expr\">key1</span>=3, <span data-index=\"91\" data-type=\"expr\">key2</span>=4, *args, **kwargs):\n    <span data-index=\"28\" data-type=\"stmt\">return <span data-index=\"94\" data-type=\"expr\">[<span data-index=\"184\" data-type=\"expr\">pos1</span>, <span data-index=\"185\" data-type=\"expr\">pos2</span>, <span data-index=\"186\" data-type=\"expr\">kwargs</span>]</span></span></span>\n", "name": "complex_args"}}, {"exception": null, "data": {"num_special_types": 13, "loop_iterations": {"34": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}]}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"307": {"2": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "1": ["<function dummy at 0xABC>", "function"]}, "304": ["<module 'itertools' (built-in)>", "module", ["__doc__", ["'Functional to...acement(p, r)\\n'", "str", "len() = 1255"]], ["__name__", ["'itertools'", "str", "len() = 9"]], ["__package__", ["None", "NoneType"]], ["chain", ["<type 'itertools.chain'>", "type", ["__doc__", ["'chain(*iterab...are exhausted.'", "str", "len() = 222"]], ["__getattribute__", ["<slot wrapper '__getattribut...of 'itertools.chain' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.chain' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["from_iterable", ["<method 'from_iterable' of 'itertools.chain' objects>", "classmethod_descriptor"]], ["next", ["<slot wrapper 'next' of 'itertools.chain' objects>", "wrapper_descriptor"]]]], ["combinations", ["<type 'itertools.combinations'>", "type", ["__doc__", ["'combinations(...,2,3), (1,2,3)'", "str", "len() = 185"]], ["__getattribute__", ["<slot wrapper '__getattribut...rtools.combinations' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of ...rtools.combinations' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.combinations' objects>", "wrapper_descriptor"]]]], ["combinations_with_replacement", ["<type 'itertools.combinations_with_replacement'>", "type", ["__doc__", ["'combinations_...AB AC BB BC CC'", "str", "len() = 271"]], ["__getattribute__", ["<slot wrapper '__getattribut...ns_with_replacement' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of ...ns_with_replacement' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'ite...ns_with_replacement' objects>", "wrapper_descriptor"]]]], ["compress", ["<type 'itertools.compress'>", "type", ["__doc__", ["'compress(data...data elements.'", "str", "len() = 222"]], ["__getattribute__", ["<slot wrapper '__getattribut...'itertools.compress' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.compress' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.compress' objects>", "wrapper_descriptor"]]]], ["count", ["<type 'itertools.count'>", "type", ["__doc__", ["'count(start=0...    x += step\\n'", "str", "len() = 243"]], ["__getattribute__", ["<slot wrapper '__getattribut...of 'itertools.count' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.count' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["__reduce__", ["<method '__reduce__' of 'itertools.count' objects>", "method_descriptor"]], ["__repr__", ["<slot wrapper '__repr__' of 'itertools.count' objects>", "wrapper_descriptor"]], ["next", ["<slot wrapper 'next' of 'itertools.count' objects>", "wrapper_descriptor"]]]], ["cycle", ["<type 'itertools.cycle'>", "type", ["__doc__", ["'cycle(iterabl... indefinitely.'", "str", "len() = 129"]], ["__getattribute__", ["<slot wrapper '__getattribut...of 'itertools.cycle' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.cycle' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.cycle' objects>", "wrapper_descriptor"]]]], ["dropwhile", ["<type 'itertools.dropwhile'>", "type", ["__doc__", ["'dropwhile(pre... is exhausted.'", "str", "len() = 178"]], ["__getattribute__", ["<slot wrapper '__getattribut...itertools.dropwhile' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.dropwhile' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.dropwhile' objects>", "wrapper_descriptor"]]]], ["filterfalse", ["<type 'itertools.ifilterfalse'>", "type", ["__doc__", ["'ifilterfalse(...hat are false.'", "str", "len() = 185"]], ["__getattribute__", ["<slot wrapper '__getattribut...rtools.ifilterfalse' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of ...rtools.ifilterfalse' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.ifilterfalse' objects>", "wrapper_descriptor"]]]], ["groupby", ["<type 'itertools.groupby'>", "type", ["__doc__", ["'groupby(itera...f key(value).\\n'", "str", "len() = 122"]], ["__getattribute__", ["<slot wrapper '__getattribut... 'itertools.groupby' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.groupby' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.groupby' objects>", "wrapper_descriptor"]]]], ["ifilter", ["<type 'itertools.ifilter'>", "type", ["__doc__", ["'ifilter(funct...that are true.'", "str", "len() = 173"]], ["__getattribute__", ["<slot wrapper '__getattribut... 'itertools.ifilter' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.ifilter' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.ifilter' objects>", "wrapper_descriptor"]]]], ["ifilterfalse", ["<type 'itertools.ifilterfalse'>", "type", ["__doc__", ["'ifilterfalse(...hat are false.'", "str", "len() = 185"]], ["__getattribute__", ["<slot wrapper '__getattribut...rtools.ifilterfalse' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of ...rtools.ifilterfalse' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.ifilterfalse' objects>", "wrapper_descriptor"]]]], ["imap", ["<type 'itertools.imap'>", "type", ["__doc__", ["'imap(func, *i...ter\\niterables.'", "str", "len() = 300"]], ["__getattribute__", ["<slot wrapper '__getattribut... of 'itertools.imap' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.imap' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.imap' objects>", "wrapper_descriptor"]]]], ["islice", ["<type 'itertools.islice'>", "type", ["__doc__", ["'islice(iterab...s an iterator.'", "str", "len() = 416"]], ["__getattribute__", ["<slot wrapper '__getattribut...f 'itertools.islice' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.islice' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.islice' objects>", "wrapper_descriptor"]]]], ["izip", ["<type 'itertools.izip'>", "type", ["__doc__", ["'izip(iter1 [,...ead of\\na list.'", "str", "len() = 393"]], ["__getattribute__", ["<slot wrapper '__getattribut... of 'itertools.izip' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.izip' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.izip' objects>", "wrapper_descriptor"]]]], ["izip_longest", ["<type 'itertools.izip_longest'>", "type", ["__doc__", ["'izip_longest(...ord argument.\\n'", "str", "len() = 499"]], ["__getattribute__", ["<slot wrapper '__getattribut...rtools.izip_longest' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of ...rtools.izip_longest' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.izip_longest' objects>", "wrapper_descriptor"]]]], ["permutations", ["<type 'itertools.permutations'>", "type", ["__doc__", ["'permutations(..., (2,0), (2,1)'", "str", "len() = 193"]], ["__getattribute__", ["<slot wrapper '__getattribut...rtools.permutations' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of ...rtools.permutations' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.permutations' objects>", "wrapper_descriptor"]]]], ["product", ["<type 'itertools.product'>", "type", ["__doc__", ["'product(*iter...1) (1,0,0) ...'", "str", "len() = 721"]], ["__getattribute__", ["<slot wrapper '__getattribut... 'itertools.product' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.product' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.product' objects>", "wrapper_descriptor"]]]], ["repeat", ["<type 'itertools.repeat'>", "type", ["__doc__", ["'repeat(object...ect\\nendlessly.'", "str", "len() = 154"]], ["__getattribute__", ["<slot wrapper '__getattribut...f 'itertools.repeat' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.repeat' objects>", "wrapper_descriptor"]], ["__length_hint__", ["<method '__length_hint__' of 'itertools.repeat' objects>", "method_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["__repr__", ["<slot wrapper '__repr__' of 'itertools.repeat' objects>", "wrapper_descriptor"]], ["next", ["<slot wrapper 'next' of 'itertools.repeat' objects>", "wrapper_descriptor"]]]], ["starmap", ["<type 'itertools.starmap'>", "type", ["__doc__", ["'starmap(funct...iven sequence.'", "str", "len() = 173"]], ["__getattribute__", ["<slot wrapper '__getattribut... 'itertools.starmap' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.starmap' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.starmap' objects>", "wrapper_descriptor"]]]], ["takewhile", ["<type 'itertools.takewhile'>", "type", ["__doc__", ["'takewhile(pre...or each entry.'", "str", "len() = 155"]], ["__getattribute__", ["<slot wrapper '__getattribut...itertools.takewhile' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.takewhile' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.takewhile' objects>", "wrapper_descriptor"]]]], ["tee", ["<built-in function tee>", "builtin_function_or_method"]], ["zip_longest", ["<type 'itertools.izip_longest'>", "type", ["__doc__", ["'izip_longest(...ord argument.\\n'", "str", "len() = 499"]], ["__getattribute__", ["<slot wrapper '__getattribut...rtools.izip_longest' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of ...rtools.izip_longest' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.izip_longest' objects>", "wrapper_descriptor"]]]]], "308": {"2": ["2", "int"], "0": ["0", "int"], "1": ["1", "int"]}, "103": {"2": true, "0": true, "1": true}, "102": ["<itertools.islice object at 0xABC>", "islice"], "34": true, "197": {"2": ["None", "NoneType"], "0": ["None", "NoneType"], "1": ["None", "NoneType"]}, "194": ["<type 'itertools.islice'>", "type", ["__doc__", ["'islice(iterab...s an iterator.'", "str", "len() = 416"]], ["__getattribute__", ["<slot wrapper '__getattribut...f 'itertools.islice' objects>", "wrapper_descriptor"]], ["__iter__", ["<slot wrapper '__iter__' of 'itertools.islice' objects>", "wrapper_descriptor"]], ["__new__", ["<built-in method __new__ of type object at 0xABC>", "builtin_function_or_method"]], ["next", ["<slot wrapper 'next' of 'itertools.islice' objects>", "wrapper_descriptor"]]], "195": ["<generator object gen at 0xABC>", "generator"]}}, "arguments": [["g", "<generator object gen at 0xABC>"]], "return_value": "None", "traceback": null, "function": {"lineno": 37, "data": {"node_loops": {"103": [34], "308": [34], "307": [34], "197": [34]}}, "html_body": "<span data-index=\"9\" data-type=\"stmt\">@<span data-index=\"35\" data-type=\"expr\">eye</span>\ndef use_gen_1(<span data-index=\"100\" data-type=\"expr\">g</span>):\n<span data-index=\"34\" data-type=\"loop\">    for x in <span data-index=\"102\" data-type=\"expr\"><span data-index=\"194\" data-type=\"expr\"><span data-index=\"304\" data-type=\"expr\">itertools</span>.islice</span>(<span data-index=\"195\" data-type=\"expr\">g</span>, 3)</span>:\n        <span data-index=\"103\" data-type=\"stmt\"><span data-index=\"197\" data-type=\"expr\"><span data-index=\"307\" data-type=\"expr\">dummy</span>(<span data-index=\"308\" data-type=\"expr\">x</span>)</span></span></span></span>\n", "name": "use_gen_1"}}, {"exception": null, "data": {"num_special_types": 13, "loop_iterations": {"31": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}, {"index": 3, "loops": {}}, {"index": 4, "loops": {}}, {"index": 5, "loops": {}}]}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"303": {"2": ["2", "int"], "3": ["3", "int"], "0": ["0", "int"], "1": ["1", "int"], "4": ["4", "int"], "5": ["5", "int"]}, "31": true, "98": {"2": true, "3": true, "0": true, "1": true, "4": true, "5": true}, "191": {"2": ["None", "NoneType"], "3": ["None", "NoneType"], "0": ["None", "NoneType"], "1": ["None", "NoneType"], "4": ["None", "NoneType"], "5": ["None", "NoneType"]}, "97": ["[0, 1, 2, 3, 4, 5]", "list", "len() = 6", ["0", ["0", "int"]], ["1", ["1", "int"]], ["2", ["2", "int"]], ["3", ["3", "int"]], ["4", ["4", "int"]], ["5", ["5", "int"]]]}}, "arguments": [], "return_value": "None", "traceback": null, "function": {"lineno": 31, "data": {"node_loops": {"303": [31], "98": [31], "191": [31]}}, "html_body": "<span data-index=\"8\" data-type=\"stmt\">@<span data-index=\"32\" data-type=\"expr\">eye</span>\ndef gen():\n<span data-index=\"31\" data-type=\"loop\">    for i in <span data-index=\"97\" data-type=\"expr\"><span data-index=\"189\" data-type=\"expr\">range</span>(6)</span>:\n        <span data-index=\"98\" data-type=\"stmt\"><span data-index=\"191\" data-type=\"expr\">yield <span data-index=\"303\" data-type=\"expr\">i</span></span></span></span></span>\n", "name": "gen"}}, {"exception": null, "data": {"num_special_types": 13, "loop_iterations": {"37": [{"index": 0, "loops": {}}, {"index": 1, "loops": {}}, {"index": 2, "loops": {}}]}, "type_names": ["MyClass", "NoneType", "SlotClass", "ValueError", "bool", "builtin_function_or_method", "classmethod_descriptor", "complex", "dict", "float", "frozenset", "function", "generator", "getset_descriptor", "int", "islice", "list", "long", "member_descriptor", "method_descriptor", "module", "set", "str", "tuple", "type", "unicode", "wrapper_descriptor"], "node_values": {"310": {"2": ["5", "int"], "0": ["3", "int"], "1": ["4", "int"]}, "309": {"2": ["<function dummy at 0xABC>", "function"], "0": ["<function dummy at 0xABC>", "function"], "1": ["<function dummy at 0xABC>", "function"]}, "201": {"2": ["None", "NoneType"], "0": ["None", "NoneType"], "1": ["None", "NoneType"]}, "107": ["<generator object gen at 0xABC>", "generator"], "37": true, "108": {"2": true, "0": true, "1": true}}}, "arguments": [["g", "<generator object gen at 0xABC>"]], "return_value": "None", "traceback": null, "function": {"lineno": 43, "data": {"node_loops": {"108": [37], "309": [37], "201": [37], "310": [37]}}, "html_body": "<span data-index=\"10\" data-type=\"stmt\">@<span data-index=\"38\" data-type=\"expr\">eye</span>\ndef use_gen_2(<span data-index=\"105\" data-type=\"expr\">g</span>):\n<span data-index=\"37\" data-type=\"loop\">    for y in <span data-index=\"107\" data-type=\"expr\">g</span>:\n        <span data-index=\"108\" data-type=\"stmt\"><span data-index=\"201\" data-type=\"expr\"><span data-index=\"309\" data-type=\"expr\">dummy</span>(<span data-index=\"310\" data-type=\"expr\">y</span>)</span></span></span></span>\n", "name": "use_gen_2"}}]